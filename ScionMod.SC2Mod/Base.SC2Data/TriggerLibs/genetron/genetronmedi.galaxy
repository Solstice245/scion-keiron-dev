//--------------------------------------------------------------------------------------------------
//  GenetronUpgradesMedi
//--------------------------------------------------------------------------------------------------
void GenetronUpgradesMedi (int player, int phase) {
    int buildType;

    if (phase < c_ldPhaseLate) {
        buildType = AIGetUserInt(player, c_openingBuildType);
    } else {
        buildType = AIGetUserInt(player, c_lateGameBuildType);
    }
    if (buildType != e_buildType_Air) {
        if (phase >= c_ldPhaseMid) {
            if (phase >= c_ldPhaseLate) {

                AISetStock( player, 1, c_GR_LightWeapons1 );
                AISetStock( player, 1, c_GR_GroundArmor1 );
                AISetStock( player, 1, c_GR_IntegratedOptics );
                AISetStock( player, 1, c_GR_CloakingGenerator );

                if (phase >= c_ldPhaseFinal) {

                    if (AITechCount(player, c_GU_Spitfire, c_techCountInProgressOrBetter) >= 6) {
                        AISetStock( player, 1, c_GR_CalibratedEngines );
                    }
                    if (AITechCount(player, c_GU_Blitzer, c_techCountInProgressOrBetter) >= 6) {
                        AISetStock( player, 1, c_GR_ReinforcedPlating );
                    }

                    AISetStock( player, 1, c_GR_LightWeapons3 );
                    AISetStock( player, 1, c_GR_GroundArmor3 );
                    AISetStock( player, 1, c_GR_HeavyWeapons2 );
                    AISetStock( player, 1, c_GR_AirWeapons2 );
                    AISetStock( player, 1, c_GR_AirArmor2 );
                }
            }
        }
    }
    else {  // (buildType == e_buildType_Air) 
        if (phase >= c_ldPhaseMid) {
            if (phase >= c_ldPhaseLate) {
                AISetStock( player, 1, c_GR_AirWeapons1 );
                AISetStock( player, 1, c_GR_AirArmor1 );

                if (phase >= c_ldPhaseFinal) {

                    if (AITechCount(player, c_GU_Hornet, c_techCountInProgressOrBetter) >= 4) {
                        AISetStock( player, 1, c_GR_BoreDrills );
                    }

                    if (AITechCount(player, c_GU_Badger, c_techCountInProgressOrBetter) >= 2) {
                        AISetStock( player, 1, c_GR_AAMDefenseTurret );
                    }

                    if (AITechCount(player, c_GU_Spitfire, c_techCountInProgressOrBetter) >= 6) {
                        AISetStock( player, 1, c_GR_CalibratedEngines );
                    }
                    if (AITechCount(player, c_GU_Blitzer, c_techCountInProgressOrBetter) >= 6) {
                        AISetStock( player, 1, c_GR_ReinforcedPlating );
                    }

                    AISetStock( player, 1, c_GR_AirWeapons3 );
                    AISetStock( player, 1, c_GR_AirArmor3 );
                    AISetStock( player, 1, c_GR_LightWeapons2 );
                    AISetStock( player, 1, c_GR_GroundArmor2 );
                    AISetStock( player, 1, c_GR_HeavyWeapons2 );
                }
            }
        }
    }
}

//--------------------------------------------------------------------------------------------------
//  GenetronOpenArmyInitMedi
//--------------------------------------------------------------------------------------------------
int GenetronOpenArmyInitMedi (int player, int buildType) {
    int armyRoll = 0;
    int duration = 0;

    if (buildType == e_buildType_Rush) {
        armyRoll = RandomInt(1,3);
        if (armyRoll <= 2) {
            AIAddToStockArmy(player, c_GU_Spitfire, 3);
            AIAddToStockArmy(player, c_GU_Fixer, 2);
            // validation: 5 units above with cost 10 food and 550 resources
            duration = 360 + RandomInt(-15, 15);
        } else {
            AIAddToStockArmy(player, c_GU_Spitfire, 6);
            // validation: 6 units above with cost 12 food and 600 resources
            duration = 320 + RandomInt(-15, 15);
        }
    } else if (buildType == e_buildType_Timing) {
        armyRoll = RandomInt(1,3);
        if (armyRoll <= 2) {
            AIAddToStockArmy(player, c_GU_Spitfire, 3);
            AIAddToStockArmy(player, c_GU_Blitzer, 3);
            // validation: 6 units above with cost 12 food and 825 resources
            duration = 460 + RandomInt(-15, 15);
        } else {
            AIAddToStockArmy(player, c_GU_Spitfire, 5);
            AIAddToStockArmy(player, AIPickFrom2(c_GU_Spitfire, c_GU_Blitzer), 2);
            // validation: 7 units above with cost 14 food and 775 resources
            duration = 450 + RandomInt(-15, 15);
        }
    } else if (buildType == e_buildType_Power) {
        armyRoll = RandomInt(1,3);
        if (armyRoll < 2) {
            AIAddToStockArmy(player, c_GU_Spitfire, 4);
            AIAddToStockArmy(player, c_GU_Blitzer, 2);
            AIAddToStockArmy(player, AIPickFrom2(c_GU_Spitfire, c_GU_Blitzer), 3);
            // validation: 8 units above with cost 16 food and 1137 resources
            duration = 570 + RandomInt(-15, 15);
        } else {
            AIAddToStockArmy(player, c_GU_Spitfire, 2);
            AIAddToStockArmy(player, c_GU_Blitzer, 4);
            AIAddToStockArmy(player, AIPickFrom2(c_GU_Spitfire, c_GU_Blitzer), 3);
            // validation: 8 units above with cost 16 food and 1137 resources
            duration = 590 + RandomInt(-15, 15);
        }
    } else if (buildType == e_buildType_Macro) {
        armyRoll = RandomInt(1,4);
        if (armyRoll <= 3) {
            AIAddToStockArmy(player, c_GU_Spitfire, 2);
            AIAddToStockArmy(player, c_GU_Blitzer, 2);
            // validation: 4 units above with average cost 8 food and 550 resources
            duration = 230 + RandomInt(-15, 15);
        } else if (armyRoll <= 4) {
            AIAddToStockArmy(player, c_GU_Spitfire, 4);
            AIAddToStockArmy(player, c_GU_Blitzer, 1);
            // validation: 5 units above with average cost 10 food and 575 resources
            duration = 250 + RandomInt(-15, 15);
        }
    } else if (buildType == e_buildType_Air) {
        AIAddToStockArmy(player, c_GU_Avenger, 2);
        AIAddToStockArmy(player, c_GU_Hornet, 4);
        // validation: 6 units above with cost 12 food and 1175 resources
        duration = 650 + RandomInt(-20, 20);
    } else {
        return GenetronOpenArmyInitMedi(player, e_buildType_Macro);
    }

    AISetUserInt(player, c_ldNextArmyRoll, armyRoll);
    return duration;
}

//--------------------------------------------------------------------------------------------------
//  GenetronOpenInitMedi
//--------------------------------------------------------------------------------------------------
void GenetronOpenInitMedi (int player) {
    int buildType = 0;

    AIChooseNextOpeningBuild(player);
    buildType = AIGetUserInt(player, c_openingBuildType);
    AISetupNextArmy (player, buildType, c_ldPhaseOpen, GenetronOpenArmyInitMedi);

    AISetMainState(player, e_mainState_Open, e_mainSubState_Build);
}

//--------------------------------------------------------------------------------------------------
//  GenetronOpenBuildMedi
//--------------------------------------------------------------------------------------------------
void GenetronOpenBuildMedi (int player) {
    int buildType = AIGetUserInt(player, c_openingBuildType);
    int armyRoll = AIGetUserInt(player, c_ldNextArmyRoll);
    int timeOut = AIGetUserInt(player, c_nextArmyTime);
    bool nextState = false;

    if (AIHasPlayerChangedCurrentOpening(player)) {
        AISetMainState(player, e_mainState_Open, e_mainSubState_Init);
        return;
    }

    AIClearStock(player);

    if (buildType == e_buildType_Rush) {
        AISetStock( player, 1, c_GB_ProcessingCore );
        AISetStock( player, 16, c_GU_ACR );
        AISetStock( player, 1, c_GB_Node );
        AISetStock( player, 1, c_GB_Manufacturer );
        AISetStock( player, 1, c_GB_FilteringPlant );
        AISetStock( player, 2, c_GU_Spitfire );
        AISetStock( player, 1, c_GB_Uploader );
        AISetStock( player, 2, c_GB_Node );
        AISetStock( player, 18, c_GU_ACR );
        AISetStockFarms( player, c_GB_Node, c_stockNormalFarms);
    }
    else if (buildType == e_buildType_Timing) {
        AISetStock( player, 1, c_GB_ProcessingCore );
        AISetStock( player, 16, c_GU_ACR );
        AISetStock( player, 1, c_GB_Node );
        AISetStock( player, 1, c_GB_Manufacturer );
        AISetStock( player, 1, c_GB_FilteringPlant );
        AISetStock( player, 2, c_GU_Spitfire );
        AISetStock( player, 1, c_GB_Uploader );
        AISetStock( player, 2, c_GB_Node );
        AISetStock( player, 18, c_GU_ACR );
        AISetStockFarms( player, c_GB_Node, c_stockNormalFarms);
        AISetStock( player, 2, c_GB_FilteringPlant );
        AISetStock( player, 2, c_GB_Manufacturer );
    }
    else if (buildType == e_buildType_Power) {
        AISetStock( player, 1, c_GB_ProcessingCore );
        AISetStock( player, 16, c_GU_ACR );
        AISetStock( player, 1, c_GB_Node );
        AISetStock( player, 1, c_GB_Manufacturer );
        AISetStock( player, 1, c_GB_FilteringPlant );
        AISetStock( player, 1, c_GU_Spitfire );
        AISetStock( player, 1, c_GB_Uploader );
        AISetStock( player, 2, c_GB_Node );
        AISetStock( player, 18, c_GU_ACR );
        AISetStockFarms( player, c_GB_Node, c_stockNormalFarms);
        AISetStock( player, 2, c_GB_FilteringPlant );
        AISetStock( player, 2, c_GB_Uploader );
    }
    else if (buildType == e_buildType_Macro) {
        AISetStock( player, 1, c_GB_ProcessingCore );
        AISetStock( player, 16, c_GU_ACR );
        AISetStock( player, 1, c_GB_Node );
        AISetStock( player, 1, c_GB_Manufacturer );
        if (GenetronMacroExpand(player)) { return; }
        AISetStock( player, 2, c_GU_Spitfire );
        AISetStock( player, 3, c_GB_Uploader );
        AISetStock( player, 2, c_GB_Node );
        AISetStock( player, 18, c_GU_ACR );
        AISetStock( player, 1, c_GB_Fabricator );
        AISetStock( player, 1, c_GB_FilteringPlant );
        AISetStockUnitNext( player, 24, c_GU_ACR, c_stockIdle );
        AISetStockFarms( player, c_GB_Node, c_stockNormalFarms);
        AISetStock( player, 2, c_GB_FilteringPlant );
    }
    else if (buildType == e_buildType_Air) {
        AISetStock( player, 1, c_GB_ProcessingCore );
        AISetStock( player, 16, c_GU_ACR );
        AISetStock( player, 1, c_GB_Node );
        if (GenetronMacroExpand(player)) { return; }
        AISetStock( player, 1, c_GB_FilteringPlant );
        AISetStock( player, 1, c_GB_Manufacturer );
        AISetStock( player, 2, c_GB_FilteringPlant );
        AISetStock( player, 18, c_GU_ACR );
        AISetStock( player, 2, c_GB_Node );
        AISetStock( player, 1, c_GB_Fabricator );
        AISetStockUnitNext( player, 24, c_GU_ACR, c_stockIdle );
        AISetStockFarms( player, c_GB_Node, c_stockNormalFarms);
        AISetStock( player, 1, c_GB_AssemblyArray );
        AISetStock( player, 9, c_GB_Uploader );
    }

    GenetronBasicDefenseStock(player);

    AISetStockArmyScale(player, 0.35);

    GenetronGeneralBuild(player, c_ldPhaseOpen);

    AISetStockArmyScale(player, 0.70);

    GenetronUpgradesMedi(player, c_ldPhaseOpen);

    AISetStockArmyScale(player, 1.00);

    AILDStockWorkers( player, 24, c_GU_ACR);

    GenetronTechUp(player, c_ldPhaseOpen);

    if (buildType == e_buildType_Air) {
        AISetStock( player, 1, c_GU_Courier );
    }

    AIEnableStock(player);

    AILDGeneralSharedLogic(player);

    nextState = AITestTimeout(player, timeOut, e_mainState_Mid, e_mainSubState_Init);
}

//--------------------------------------------------------------------------------------------------
//  GenetronMidArmyInitMedi
//--------------------------------------------------------------------------------------------------
int GenetronMidArmyInitMedi (int player, int buildType) {
    int armyRoll = 0;
    int duration = 0;

    if (buildType == e_buildType_Rush) {
        AIAddToStockArmy(player, c_GU_Spitfire, 2);
        AIAddToStockArmy(player, c_GU_Blitzer, 3);
        AIAddToStockArmy(player, c_GU_Mole_Alias, 1);
        AIAddToStockArmy(player, AIPickFrom2(c_GU_Spitfire, c_GU_Blitzer), 2);
        // validation: 8 units above with average cost 16 food and 1150 resources
        duration = 317 + RandomInt(-10, 15);
    }
    else if (buildType == e_buildType_Timing) {
        AIAddToStockArmy(player, c_GU_Spitfire, 2);
        AIAddToStockArmy(player, c_GU_Blitzer, 4);
        AIAddToStockArmy(player, c_GU_Mole_Alias, 1);
        AIAddToStockArmy(player, AIPickFrom2(c_GU_Spitfire, c_GU_Blitzer), 2);
        AIAddToStockArmy(player, AIPickFrom2(c_GU_Mole_Alias, c_GU_Blitzer), 1);
        // validation: 11 units above with average cost 22 food and 1637 resources
        duration = 373 + RandomInt(-12, 18);
    }
    else if (buildType == e_buildType_Power) {
        AIAddToStockArmy(player, c_GU_Spitfire, 2);
        AIAddToStockArmy(player, c_GU_Blitzer, 4);
        AIAddToStockArmy(player, c_GU_Mole_Alias, 1);
        AIAddToStockArmy(player, AIPickFrom2(c_GU_Spitfire, c_GU_Blitzer), 2);
        AIAddToStockArmy(player, AIPickFrom2(c_GU_Spitfire, c_GU_Blitzer), 1);
        AIAddToStockArmy(player, AIPickFrom2(c_GU_Mole_Alias, c_GU_Blitzer), 1);
        // validation: 11 units above with average cost 22 food and 1649 resources
        duration = 383 + RandomInt(-12, 19);
    }
    else if (buildType == e_buildType_Macro) {
        armyRoll = RandomInt(1,4);
        if (armyRoll <= 3) {
            AIAddToStockArmy(player, c_GU_Spitfire, 3);
            AIAddToStockArmy(player, c_GU_Blitzer, 7);
            AIAddToStockArmy(player, c_GU_Mole_Alias, 1);
            AIAddToStockArmy(player, AIPickFrom2(c_GU_Spitfire, c_GU_Blitzer), 2);
            AIAddToStockArmyPickFrom2Count(player, c_GU_Mole_Alias, 1, c_GU_Blitzer, 2);
            // validation: 16 units above with average cost 32 food and 2425 resources
            duration = 647 + RandomInt(-29, 44);
        }
        else if (armyRoll <= 4) {
            AIAddToStockArmy(player, c_GU_Spitfire, 2);
            AIAddToStockArmy(player, c_GU_Blitzer, 4);
            AIAddToStockArmy(player, c_GU_Mole_Alias, 1);
            AIAddToStockArmyPickFrom2Count(player, c_GU_Mole_Alias, 1, c_GU_Blitzer, 2);
            AIAddToStockArmy(player, c_GU_Inciter, 3);
            // validation: 12 units above with average cost 30 food and 2375 resources
            duration = 625 + RandomInt(-28, 43);
        }
    }
    else if (buildType == e_buildType_Air) {
        armyRoll = RandomInt(1,5);
        if (armyRoll <= 4) {
            AIAddToStockArmy(player, c_GU_Avenger, 2);
            AIAddToStockArmy(player, c_GU_Hornet, 3);
            // validation: 5 units above with average cost 13 food and 1550 resources
            duration = 371 + RandomInt(-12, 18);
        }
        else if (armyRoll <= 5) {
            AIAddToStockArmy(player, c_GU_Blitzer, 2);
            AIAddToStockArmy(player, c_GU_Avenger, 2);
            AIAddToStockArmy(player, c_GU_Hornet, 3);
            // validation: 6 units above with average cost 14 food and 1550 resources
            duration = 378 + RandomInt(-12, 18);
        }
    }
    else {
        return GenetronMidArmyInitMedi(player, e_buildType_Macro);
    }


    AISetUserInt(player, c_ldNextArmyRoll, armyRoll);
    return duration;
}

//--------------------------------------------------------------------------------------------------
//  GenetronMidInitMedi
//--------------------------------------------------------------------------------------------------
void GenetronMidInitMedi (int player) {
    int buildType = 0;

    AIChooseNextOpeningBuild(player);
    buildType = AIGetUserInt(player, c_openingBuildType);
    AISetupNextArmy (player, buildType, c_ldPhaseMid, GenetronMidArmyInitMedi);

    AISetFlag(player, e_flagsScouting, true);
    AISetFlag(player, e_flagsLateScout, true);
    AISetFlag(player, e_flagsDetect, true);

    AISetMainState(player, e_mainState_Mid, e_mainSubState_Build);
}

//--------------------------------------------------------------------------------------------------
//  GenetronMidBuildMedi
//--------------------------------------------------------------------------------------------------
void GenetronMidBuildMedi (int player) {
    int buildType = AIGetUserInt(player, c_openingBuildType);
    int armyRoll = AIGetUserInt(player, c_ldNextArmyRoll);
    int timeOut = AIGetUserInt(player, c_nextArmyTime);
    bool nextState = false;

    if (AIHasPlayerChangedCurrentOpening(player)) {
        AISetMainState(player, e_mainState_Mid, e_mainSubState_Init);
        return;
    }

    AIClearStock(player);

    GenetronBasicEconomy(player, c_ldPhaseMid, 18);
    if (buildType == e_buildType_Air) {
        AISetStock( player, 1, c_GU_Courier );
    }
    GenetronBasicExpansion(player, c_ldPhaseMid, 5500, 1500);

    GenetronBasicDefenseStock(player);

    AISetStockArmyScale(player, 0.35);

    GenetronGeneralBuild(player, c_ldPhaseMid);

    AILDStockWorkers( player, 24, c_GU_ACR);

    if (buildType == e_buildType_Rush) {
        AISetStockUnitNext( player, 2, c_GB_Manufacturer, c_stockIdle );
        AISetStockUnitNext( player, 4, c_GB_Uploader, c_stockIdle );
    }
    else if (buildType == e_buildType_Timing) {
        AISetStockUnitNext( player, 2, c_GB_Manufacturer, c_stockIdle );
        AISetStock( player, 1, c_GB_Fabricator);
        AISetStock( player, 6, c_GB_Uploader);
    }
    else if (buildType == e_buildType_Power) {
        if (GenetronMacroExpand(player)) { return; }
        AISetStockUnitNext( player, 2, c_GB_Manufacturer, c_stockIdle );
        AISetStock( player, 1, c_GB_Fabricator);
        AISetStock( player, 6, c_GB_Uploader);
    }
    else if (buildType == e_buildType_Macro) {
        if (GenetronMacroExpand(player)) { return; }
        AISetStockUnitNext( player, 2, c_GB_Manufacturer, c_stockIdle );
        AISetStock( player, 1, c_GB_Fabricator);
        AISetStock( player, 6, c_GB_Uploader);
    }
    else if (buildType == e_buildType_Air) {
        if (GenetronMacroExpand(player)) { return; }
        AISetStock( player, 2, c_GB_AssemblyArray );
        AISetStock( player, 9, c_GB_Uploader );
    }

    if (AINeedsDetection(player)) {
        AISetStock( player, 1, c_GU_Processor );
        AISetStock( player, 2, c_GB_Interdictor_Alias );
    }

    AISetStockArmyScale(player, 0.70);

    AILDStockWorkers( player, 54, c_GU_ACR);

    GenetronUpgradesMedi(player, c_ldPhaseMid);

    AISetStockArmyScale(player, 1.00);

    AISetStock( player, 2, c_GU_Processor );

    GenetronTechUp(player, c_ldPhaseMid);

    AIEnableStock(player);

    AILDGeneralSharedLogic(player);

    nextState = AITestTimeout(player, timeOut, e_mainState_Late, e_mainSubState_Init);
}

//--------------------------------------------------------------------------------------------------
//  GenetronLateArmyInitMedi
//--------------------------------------------------------------------------------------------------
int GenetronLateArmyInitMedi (int player, int buildType) {
    int armyRoll = 0;
    int duration = 0;

    if (buildType == e_buildType_Core) {
        armyRoll = RandomInt(1,4);
        if (armyRoll <= 3) {
            AIAddToStockArmy(player, c_GU_Spitfire, 4);
            AIAddToStockArmy(player, c_GU_Blitzer, 3);
            AIAddToStockArmyPickFrom2Count(player, c_GU_Spitfire, 3, c_GU_Fixer, 3);
            AIAddToStockArmyPickFrom2Count(player, c_GU_Blitzer, 3, c_GU_Fixer, 3);
            // validation: 13 units above with average cost 26 food and 1700 resources
            duration = 300 + RandomInt(-15, 15);
        } else if (armyRoll <= 4) {
            AIAddToStockArmy(player, c_GU_Spitfire, 5);
            AIAddToStockArmy(player, c_GU_Blitzer, 4);
            AIAddToStockArmy(player, c_GU_Mole_Alias, 3);
            // validation: 12 units above with average cost 24 food and 1875 resources
            duration = 300 + RandomInt(-15, 15);
        }
    } else if (buildType == e_buildType_HighTech) {
        armyRoll = RandomInt(1,4);
        if (armyRoll <= 3) {
            AIAddToStockArmy(player, c_GU_Blitzer, 4);
            AIAddToStockArmy(player, c_GU_Equalizer, 3);
            AIAddToStockArmy(player, c_GU_Mole_Alias, 2);
            AIAddToStockArmy(player, c_GU_Inciter, 1);
            AIAddToStockArmyPickFrom2Count(player, c_GU_Mole_Alias, 1, c_GU_Inciter, 1);
            // validation: 11 units above with average cost 24 food and 2225 resources
            duration = 330 + RandomInt(-15, 15);
        } else if (armyRoll <= 4) {
            AIAddToStockArmy(player, c_GU_Blitzer, 4);
            AIAddToStockArmy(player, c_GU_Fixer, 4);
            AIAddToStockArmy(player, c_GU_Mole_Alias, 3);
            AIAddToStockArmy(player, c_GU_Virtus, 1);
            // validation: 12 units above with average cost 26 food and 2275 resources
            duration = 360 + RandomInt(-15, 15);
        }
    } else if (buildType == e_buildType_Special) {
        armyRoll = RandomInt(1,2);
        if (armyRoll <= 1) {
            AIAddToStockArmy(player, c_GU_Spitfire, 4);
            AIAddToStockArmy(player, c_GU_Aquila, 4);
            AIAddToStockArmyPickFrom2Count(player, c_GU_Fixer, 4, c_GU_Blitzer, 3);
            AIAddToStockArmyPickFrom2Count(player, c_GU_Fixer, 4, c_GU_Blitzer, 3);
            // validation: 15 units above with average cost 18 food and 2500 resources
            duration = 380 + RandomInt(-15, 15);
        } else if (armyRoll <= 2) {
            AIAddToStockArmy(player, c_GU_Spitfire, 4);
            AIAddToStockArmy(player, c_GU_Blitzer, 4);
            AIAddToStockArmy(player, c_GU_Mole_Alias, 3);
            AIAddToStockArmy(player, c_GU_Jupiter, 2);
            // validation: 12 units above with average cost 28 food and 2475 resources
            duration = 360 + RandomInt(-15, 15);
        }
    }
    else if (buildType == e_buildType_Mixed) {
        armyRoll = RandomInt(1,5);
        if (armyRoll <= 2) {
            AIAddToStockArmy(player, c_GU_Spitfire, 4);
            AIAddToStockArmy(player, c_GU_Blitzer, 3);
            AIAddToStockArmy(player, c_GU_Fixer, 3);
            AIAddToStockArmy(player, c_GU_Equalizer, 3);
            AIAddToStockArmy(player, c_GU_Aquila, 3);
            // validation: 15 units above with average cost 21 food and 2650 resources
            duration = 390 + RandomInt(-15, 15);
        } else if (armyRoll <= 4) {
            AIAddToStockArmy(player, c_GU_Spitfire, 3);
            AIAddToStockArmy(player, c_GU_Blitzer, 4);
            AIAddToStockArmy(player, c_GU_Equalizer, 2);
            AIAddToStockArmy(player, c_GU_Torrent, 2);
            AIAddToStockArmy(player, c_GU_Inciter, 2);
            AIAddToStockArmy(player, c_GU_Mole_Alias, 2);
            // validation: 15 units above with average cost 18 food and 2700 resources
            duration = 410 + RandomInt(-15, 15);
        } else if (armyRoll <= 5) {
            AIAddToStockArmy(player, c_GU_Blitzer, 4);
            AIAddToStockArmy(player, AIPickFrom2(c_GU_Boar, c_GU_Jupiter), 2);
            AIAddToStockArmy(player, AIPickFrom2(c_GU_Badger, c_GU_Virtus), 3);
            // validation: 9 units above with average cost 31 food and 2750 resources
            duration = 420 + RandomInt(-15, 15);
        }
    } else if (buildType == e_buildType_Air) {
        armyRoll = RandomInt(1,2);
        if (armyRoll <= 1) {
            AIAddToStockArmy(player, c_GU_Avenger, 2);
            AIAddToStockArmy(player, c_GU_Hornet, 5);
            AIAddToStockArmy(player, AIPickFrom2(c_GU_Avenger, c_GU_Hornet), 4);
            // validation: 6 units above with average cost 8 food and 2325 resources
            duration = 300 + RandomInt(-15, 15);
        } else if (armyRoll <= 2) {
            AIAddToStockArmy(player, c_GU_Avenger, 2);
            AIAddToStockArmy(player, c_GU_Boar, 3);
            AIAddToStockArmy(player, c_GU_Badger, 2);
            // validation: 7 units above with average cost 24 food and 2600 resources
            duration = 340 + RandomInt(-15, 15);
        }
    } else {
        return GenetronLateArmyInitMedi(player, e_buildType_Core);
    }

    AISetUserInt(player, c_ldNextArmyRoll, armyRoll);
    return duration;
}

//--------------------------------------------------------------------------------------------------
//  GenetronFinalArmyInitMedi
//--------------------------------------------------------------------------------------------------
int GenetronFinalArmyInitMedi (int player, int buildType) {
    int armyRoll = 0;
    int duration = 0;

    if (buildType == e_buildType_Core) {
        armyRoll = RandomInt(1,4);
        if (armyRoll <= 3) {
            AIAddToStockArmy(player, c_GU_Spitfire, 8);
            AIAddToStockArmy(player, c_GU_Blitzer, 6);
            AIAddToStockArmy(player, AIPickFrom2(c_GU_Spitfire, c_GU_Fixer) , 6);
            AIAddToStockArmy(player, AIPickFrom2(c_GU_Blitzer, c_GU_Fixer) , 6);
            // validation: 26 units above with average cost 52 food and 3400 resources
            duration = 280 + RandomInt(-15, 15);
        } else if (armyRoll <= 4) {
            AIAddToStockArmy(player, c_GU_Spitfire, 10);
            AIAddToStockArmy(player, c_GU_Blitzer, 8);
            AIAddToStockArmy(player, c_GU_Mole_Alias, 5);
            // validation: 24 units above with average cost 48 food and 3525 resources
            duration = 280 + RandomInt(-15, 15);
        }
    } else if (buildType == e_buildType_HighTech) {
        armyRoll = RandomInt(1,4);
        if (armyRoll <= 3) {
            AIAddToStockArmy(player, c_GU_Blitzer, 6);
            AIAddToStockArmy(player, c_GU_Equalizer, 4);
            AIAddToStockArmy(player, c_GU_Mole_Alias, 3);
            AIAddToStockArmy(player, c_GU_Inciter, 2);
            AIAddToStockArmyPickFrom2Count(player, c_GU_Mole_Alias, 2, c_GU_Inciter, 2);
            // validation: 17 units above with average cost 37 food and 3525 resources
            duration = 330 + RandomInt(-15, 15);
        } else if (armyRoll <= 4) {
            AIAddToStockArmy(player, c_GU_Blitzer, 6);
            AIAddToStockArmy(player, c_GU_Fixer, 5);
            AIAddToStockArmy(player, c_GU_Mole_Alias, 3);
            AIAddToStockArmy(player, c_GU_Virtus, 3);
            // validation: 12 units above with average cost 26 food and 3550 resources
            duration = 360 + RandomInt(-15, 15);
        }
    } else if (buildType == e_buildType_Special) {
        armyRoll = RandomInt(1,2);
        if (armyRoll <= 1) {
            AIAddToStockArmy(player, c_GU_Spitfire, 6);
            AIAddToStockArmy(player, c_GU_Aquila, 6);
            AIAddToStockArmyPickFrom2Count(player, c_GU_Fixer, 6, c_GU_Blitzer, 4);
            AIAddToStockArmyPickFrom2Count(player, c_GU_Fixer, 6, c_GU_Blitzer, 4);
            // validation: 22 units above with average cost 50 food and 3700 resources
            duration = 360 + RandomInt(-15, 15);
        } else if (armyRoll <= 2) {
            AIAddToStockArmy(player, c_GU_Spitfire, 4);
            AIAddToStockArmy(player, c_GU_Blitzer, 4);
            AIAddToStockArmy(player, c_GU_Mole_Alias, 3);
            AIAddToStockArmy(player, c_GU_Tesla, 3);
            AIAddToStockArmy(player, c_GU_Jupiter, 2);
            // validation: 15 units above with average cost 37 food and 3525 resources
            duration = 350 + RandomInt(-15, 15);
        }
    }
    else if (buildType == e_buildType_Mixed) {
        armyRoll = RandomInt(1,5);
        if (armyRoll <= 2) {
            AIAddToStockArmy(player, c_GU_Spitfire, 4);
            AIAddToStockArmy(player, c_GU_Blitzer, 4);
            AIAddToStockArmy(player, c_GU_Fixer, 4);
            AIAddToStockArmy(player, c_GU_Equalizer, 4);
            AIAddToStockArmy(player, c_GU_Aquila, 4);
            AIAddToStockArmy(player, c_GU_Hornet, 4);
            // validation: 24 units above with average cost 52 food and 4100 resources
            duration = 350 + RandomInt(-15, 15);
        } else if (armyRoll <= 4) {
            AIAddToStockArmy(player, c_GU_Spitfire, 2);
            AIAddToStockArmy(player, c_GU_Blitzer, 3);
            AIAddToStockArmy(player, c_GU_Equalizer, 2);
            AIAddToStockArmy(player, c_GU_Torrent, 2);
            AIAddToStockArmy(player, c_GU_Inciter, 2);
            AIAddToStockArmy(player, c_GU_Mole_Alias, 2);
            AIAddToStockArmy(player, AIPickFrom2(c_GU_Badger, c_GU_Virtus), 2);
            // validation: 13 units above with average cost 14 food and 3500 resources
            duration = 380 + RandomInt(-15, 15);
        } else if (armyRoll <= 5) {
            AIAddToStockArmy(player, c_GU_Blitzer, 4);
            AIAddToStockArmy(player, AIPickFrom2(c_GU_Boar, c_GU_Jupiter), 3);
            AIAddToStockArmy(player, AIPickFrom2(c_GU_Badger, c_GU_Virtus), 4);
            // validation: 11 units above with average cost 40 food and 3550 resources
            duration = 420 + RandomInt(-15, 15);
        }
    } else if (buildType == e_buildType_Air) {
        armyRoll = RandomInt(1,2);
        if (armyRoll <= 1) {
            AIAddToStockArmy(player, c_GU_Avenger, 4);
            AIAddToStockArmy(player, c_GU_Hornet, 4);
            AIAddToStockArmyPickFrom2Count(player, c_GU_Avenger, 3, c_GU_Hornet, 5);
            AIAddToStockArmyPickFrom2Count(player, c_GU_Avenger, 3, c_GU_Hornet, 5);
            // validation: 16 units above with average cost 32 food and 3550 resources
            duration = 270 + RandomInt(-15, 15);
        } else if (armyRoll <= 2) {
            AIAddToStockArmy(player, c_GU_Avenger, 2);
            AIAddToStockArmy(player, c_GU_Boar, 3);
            AIAddToStockArmy(player, c_GU_Badger, 4);
            // validation: 7 units above with average cost 36 food and 3600 resources
            duration = 300 + RandomInt(-15, 15);
        }
    } else {
        return GenetronFinalArmyInitMedi(player, e_buildType_Core);
    }

    AISetUserInt(player, c_ldNextArmyRoll, armyRoll);
    return duration;
}

//--------------------------------------------------------------------------------------------------
//  GenetronLateInitMedi
//--------------------------------------------------------------------------------------------------
void GenetronLateInitMedi (int player) {
    int lateLoop = AIGetUserInt(player, c_ldNumLateLoops);
    int curPhase = c_ldPhaseLate;
    int buildType = 0;

    AIChooseNextLateGameBuild(player);
    buildType = AIGetUserInt(player, c_lateGameBuildType);

    if (lateLoop <= 0) { // First Late Loop
        AISetupNextArmy (player, buildType, curPhase, GenetronLateArmyInitMedi);
    } else {
        curPhase = c_ldPhaseFinal + lateLoop;
        AISetupNextArmy (player, buildType, curPhase, GenetronFinalArmyInitMedi);
    }

    AISetFlag(player, e_flagsScouting, true);
    AISetFlag(player, e_flagsClearObs, true);
    AISetFlag(player, e_flagsLateScout, true);
    AISetFlag(player, e_flagsDetect, true);

    AISetMainState(player, e_mainState_Late, e_mainSubState_Build);
}

//--------------------------------------------------------------------------------------------------
//  GenetronLateBuildMedi
//--------------------------------------------------------------------------------------------------
void GenetronLateBuildMedi (int player) {
    int lateLoop = AIGetUserInt(player, c_ldNumLateLoops);
    int buildType = AIGetUserInt(player, c_lateGameBuildType);
    int armyRoll = AIGetUserInt(player, c_ldNextArmyRoll);
    int timeOut = AIGetUserInt(player, c_nextArmyTime);
    bool nextState = false;

    if (AIHasPlayerChangedCurrentLateGame(player)) {
        AISetMainState(player, e_mainState_Late, e_mainSubState_Init);
        return;
    }

    AIClearStock(player);

    GenetronBasicEconomy(player, c_ldPhaseLate, 18);
    if (buildType == e_buildType_Air) {
        AISetStock( player, 1, c_GU_Courier );
    }
    GenetronBasicExpansion(player, c_ldPhaseLate, 10000, 2500);

    GenetronBasicDefenseStock(player);

    AISetStockArmyScale(player, 0.35);

    GenetronGeneralBuild(player, c_ldPhaseLate);

    AILDStockWorkers( player, 24, c_GU_ACR);

    if (buildType == e_buildType_Core) {
        if (GenetronMacroExpand(player)) { return; }
        AISetStockUnitNext( player, 2, c_GB_Manufacturer, c_stockIdle );
        AISetStockUnitNext( player, 1, c_GB_Fabricator, c_stockIdle );
        AISetStockUnitNext( player, 1, c_GB_AssemblyArray, c_stockIdle );
        AISetStockUnitNext( player, 12, c_GB_Uploader, c_stockIdle );
    }
    else if (buildType == e_buildType_HighTech) {
        if (GenetronMacroExpand(player)) { return; }
        AISetStockUnitNext( player, 1, c_GB_Manufacturer, c_stockIdle );
        AISetStockUnitNext( player, 2, c_GB_Fabricator, c_stockIdle );
        AISetStockUnitNext( player, 1, c_GB_AssemblyArray, c_stockIdle );
        AISetStockUnitNext( player, 12, c_GB_Uploader, c_stockIdle );
    }
    else if (buildType == e_buildType_Special) {
        if (GenetronMacroExpand(player)) { return; }
        AISetStockUnitNext( player, 1, c_GB_Manufacturer, c_stockIdle );
        AISetStockUnitNext( player, 2, c_GB_Fabricator, c_stockIdle );
        AISetStockUnitNext( player, 1, c_GB_AssemblyArray, c_stockIdle );
        AISetStockUnitNext( player, 12, c_GB_Uploader, c_stockIdle );
    }
    else if (buildType == e_buildType_Mixed) {
        if (GenetronMacroExpand(player)) { return; }
        AISetStockUnitNext( player, 2, c_GB_Manufacturer, c_stockIdle );
        AISetStockUnitNext( player, 1, c_GB_Fabricator, c_stockIdle );
        AISetStockUnitNext( player, 1, c_GB_AssemblyArray, c_stockIdle );
        AISetStockUnitNext( player, 12, c_GB_Uploader, c_stockIdle );
    }
    else if (buildType == e_buildType_Air) {
        if (GenetronMacroExpand(player)) { return; }
        AISetStockUnitNext( player, 1, c_GB_Manufacturer, c_stockIdle );
        AISetStockUnitNext( player, 1, c_GB_Fabricator, c_stockIdle );
        AISetStockUnitNext( player, 2, c_GB_AssemblyArray, c_stockIdle );
        AISetStockUnitNext( player, 12, c_GB_Uploader, c_stockIdle );
    }

    AISetStock( player, 2, c_GU_Processor );

    AISetStockArmyScale(player, 0.70);

    AISetStock( player, 2, c_GU_Courier );
    AISetStock( player, 3, c_GU_Processor );
    AISetStock( player, 2, c_GB_Interdictor_Alias );

    AISetStockArmyScale(player, 1.00);

    AILDStockWorkers( player, 54, c_GU_ACR);

    if (lateLoop <= 0) { // First Late Loop
        GenetronUpgradesMedi(player, c_ldPhaseLate);
        GenetronTechUp(player, c_ldPhaseLate);
    } else { // Remaining Loops
        GenetronUpgradesMedi(player, c_ldPhaseFinal);
        GenetronTechUp(player, c_ldPhaseFinal);
    }

    AIEnableStock(player);

    AILDGeneralSharedLogic(player);

    nextState = AITestTimeout(player, timeOut, e_mainState_Late, e_mainSubState_Init);
    if (nextState) {
        lateLoop += 1;
        AISetUserInt(player, c_ldNumLateLoops, lateLoop);
    }
}

//--------------------------------------------------------------------------------------------------
//  GenetronOpenMedi
//--------------------------------------------------------------------------------------------------
void GenetronOpenMedi (int player) {
    int mainSubState = AIState(player, e_mainSubState);

    if (mainSubState != e_mainSubState_Build) {
        GenetronOpenInitMedi(player);
        mainSubState = AIState(player, e_mainSubState);
    }

    if (mainSubState == e_mainSubState_Build) { GenetronOpenBuildMedi(player); }
    else { ErrorMeleeScript(player, "Invalid Open MainSubState GenetronMedi"); }
}

//--------------------------------------------------------------------------------------------------
//  GenetronMidMedi
//--------------------------------------------------------------------------------------------------
void GenetronMidMedi (int player) {
    int mainSubState = AIState(player, e_mainSubState);

    if (mainSubState != e_mainSubState_Build) {
        GenetronMidInitMedi(player);
        mainSubState = AIState(player, e_mainSubState);
    }

    if (mainSubState == e_mainSubState_Build) { GenetronMidBuildMedi(player);  }
    else { ErrorMeleeScript(player, "Invalid Mid MainSubState GenetronMedi"); }
}

//--------------------------------------------------------------------------------------------------
//  GenetronLateMedi
//--------------------------------------------------------------------------------------------------
void GenetronLateMedi (int player) {
    int mainSubState = AIState(player, e_mainSubState);

    if (mainSubState != e_mainSubState_Build) {
        GenetronLateInitMedi(player);
        mainSubState = AIState(player, e_mainSubState);
    }

    if (mainSubState == e_mainSubState_Build) { GenetronLateBuildMedi(player);  }
    else { ErrorMeleeScript(player, "Invalid Late MainSubState GenetronMedi"); }
}

