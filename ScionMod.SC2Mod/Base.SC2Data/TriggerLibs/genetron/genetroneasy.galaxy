//--------------------------------------------------------------------------------------------------
//  GenetronUpgradesEasy
//--------------------------------------------------------------------------------------------------
void GenetronUpgradesEasy (int player, int phase) {
    int buildType;

    if (phase < c_ldPhaseLate) {
        buildType = AIGetUserInt(player, c_openingBuildType);
    } else {
        buildType = AIGetUserInt(player, c_lateGameBuildType);
    }
    if (buildType != e_buildType_Air) {
        if (phase >= c_ldPhaseMid) {
            if (phase >= c_ldPhaseLate) {
                AISetStock( player, 1, c_GR_LightWeapons1 );
                AISetStock( player, 1, c_GR_GroundArmor1 );

                if (phase >= c_ldPhaseFinal) {
                    AISetStock( player, 1, c_GR_LightWeapons2 );
                    AISetStock( player, 1, c_GR_GroundArmor2 );
                    AISetStock( player, 1, c_GR_HeavyWeapons1 );
                    AISetStock( player, 1, c_GR_AirWeapons1 );
                    AISetStock( player, 1, c_GR_AirArmor1 );
                }
            }
        }
    }
    else {  // (buildType == e_buildType_Air) 
        if (phase >= c_ldPhaseMid) {
            if (phase >= c_ldPhaseLate) {
                AISetStock( player, 1, c_GR_AirWeapons1 );
                AISetStock( player, 1, c_GR_AirArmor1 );

                if (phase >= c_ldPhaseFinal) {
                    AISetStock( player, 1, c_GR_AirWeapons2 );
                    AISetStock( player, 1, c_GR_AirArmor2 );
                    AISetStock( player, 1, c_GR_LightWeapons1 );
                    AISetStock( player, 1, c_GR_GroundArmor1 );
                    AISetStock( player, 1, c_GR_HeavyWeapons1 );
                }
            }
        }
    }
}

//--------------------------------------------------------------------------------------------------
//  GenetronOpenArmyInitEasy
//--------------------------------------------------------------------------------------------------
int GenetronOpenArmyInitEasy (int player, int buildType) {
    int armyRoll = 0;
    int duration = 0;

    if (buildType == e_buildType_Rush) {
        // next attack should be around 5 foodCost and 300 resCost after about 400 seconds
        AIAddToStockArmy(player, c_GU_Spitfire, 2);
        AIAddToStockArmy(player, c_GU_Fixer, 1);
        // validation: 3 units above with cost 6 food and 375 resources
        duration = 387 + RandomInt(-12, 19);
    }
    else if (buildType == e_buildType_Timing) {
        // next attack should be around 7 foodCost and 400 resCost after about 460 seconds
        AIAddToStockArmy(player, c_GU_Spitfire, 4);
        // validation: 4 units above with cost 8 food and 400 resources
        duration = 460 + RandomInt(-15, 23);
    }
    else if (buildType == e_buildType_Power) {
        // next attack should be around 9 foodCost and 540 resCost after about 580 seconds
        AIAddToStockArmy(player, c_GU_Spitfire, 3);
        AIAddToStockArmy(player, c_GU_Blitzer, 2);
        // validation: 5 units above with cost 10 food and 575 resources
        duration = 611 + RandomInt(-20, 30);
    }
    else if (buildType == e_buildType_Macro) {
        // next attack should be around 5 foodCost and 300 resCost after about 240 seconds
        AIAddToStockArmy(player, c_GU_Spitfire, 2);
        AIAddToStockArmy(player, c_GU_Fixer, 1);
        // validation: 3 units above with cost 6 food and 375 resources
        duration = 232 + RandomInt(-7, 11);
    }
    else if (buildType == e_buildType_Air) {
        // next attack should be around 6 foodCost and 600 resCost after about 620 seconds
        AIAddToStockArmy(player, c_GU_Hornet, 4);
        // validation: 4 units above with cost 8 food and 625 resources
        duration = 652 + RandomInt(-21, 32);
    }
    else {
        return GenetronOpenArmyInitEasy(player, e_buildType_Macro);
    }

    AISetUserInt(player, c_ldNextArmyRoll, armyRoll);
    return duration;
}

//--------------------------------------------------------------------------------------------------
//  GenetronOpenInitEasy
//--------------------------------------------------------------------------------------------------
void GenetronOpenInitEasy (int player) {
    int buildType = 0;

    AIChooseNextOpeningBuild(player);
    buildType = AIGetUserInt(player, c_openingBuildType);
    AISetupNextArmy (player, buildType, c_ldPhaseOpen, GenetronOpenArmyInitEasy);

    AISetMainState(player, e_mainState_Open, e_mainSubState_Build);
}

//--------------------------------------------------------------------------------------------------
//  GenetronOpenBuildEasy
//--------------------------------------------------------------------------------------------------
void GenetronOpenBuildEasy (int player) {
    int buildType = AIGetUserInt(player, c_openingBuildType);
    int armyRoll = AIGetUserInt(player, c_ldNextArmyRoll);
    int timeOut = AIGetUserInt(player, c_nextArmyTime);
    bool nextState = false;

    if (AIHasPlayerChangedCurrentOpening(player)) {
        AISetMainState(player, e_mainState_Open, e_mainSubState_Init);
        return;
    }

    AIClearStock(player);

    if (buildType == e_buildType_Rush) {
        AISetStock( player, 1, c_GB_ProcessingCore );
        AISetStock( player, 16, c_GU_ACR );
        AISetStock( player, 1, c_GB_Node );
        AISetStock( player, 1, c_GB_Manufacturer );
        AISetStock( player, 1, c_GB_FilteringPlant );
        AISetStock( player, 2, c_GU_Spitfire );
        AISetStock( player, 1, c_GB_Uploader );
        AISetStock( player, 2, c_GB_Node );
        AISetStockFarms( player, c_GB_Node, c_stockNormalFarms);
    }
    else if (buildType == e_buildType_Timing) {
        AISetStock( player, 1, c_GB_ProcessingCore );
        AISetStock( player, 16, c_GU_ACR );
        AISetStock( player, 1, c_GB_Node );
        AISetStock( player, 1, c_GB_Manufacturer );
        AISetStock( player, 1, c_GB_FilteringPlant );
        AISetStock( player, 2, c_GU_Spitfire );
        AISetStock( player, 1, c_GB_Uploader );
        AISetStock( player, 2, c_GB_Node );
        AISetStockFarms( player, c_GB_Node, c_stockNormalFarms);
        AISetStock( player, 2, c_GB_FilteringPlant );
    }
    else if (buildType == e_buildType_Power) {
        AISetStock( player, 1, c_GB_ProcessingCore );
        AISetStock( player, 16, c_GU_ACR );
        AISetStock( player, 1, c_GB_Node );
        AISetStock( player, 1, c_GB_Manufacturer );
        AISetStock( player, 1, c_GB_FilteringPlant );
        AISetStock( player, 1, c_GU_Spitfire );
        AISetStock( player, 1, c_GB_Uploader );
        AISetStock( player, 2, c_GB_Node );
        AISetStockFarms( player, c_GB_Node, c_stockNormalFarms);
        AISetStock( player, 2, c_GB_FilteringPlant );
    }
    else if (buildType == e_buildType_Macro) {
        AISetStock( player, 1, c_GB_ProcessingCore );
        AISetStock( player, 16, c_GU_ACR );
        AISetStock( player, 1, c_GB_Node );
        AISetStock( player, 1, c_GB_Manufacturer );
        if (GenetronMacroExpand(player)) { return; }
        AISetStock( player, 2, c_GU_Spitfire );
        AISetStock( player, 3, c_GB_Uploader );
        AISetStock( player, 2, c_GB_Node );
        AISetStock( player, 1, c_GB_Fabricator );
        AISetStock( player, 1, c_GB_FilteringPlant );
        AISetStockUnitNext( player, 22, c_GU_ACR, c_stockIdle );
        AISetStockFarms( player, c_GB_Node, c_stockNormalFarms);
        AISetStock( player, 2, c_GB_FilteringPlant );
    }
    else if (buildType == e_buildType_Air) {
        AISetStock( player, 1, c_GB_ProcessingCore );
        AISetStock( player, 16, c_GU_ACR );
        AISetStock( player, 1, c_GB_Node );
        if (GenetronMacroExpand(player)) { return; }
        AISetStock( player, 1, c_GB_FilteringPlant );
        AISetStock( player, 1, c_GB_Manufacturer );
        AISetStock( player, 2, c_GB_FilteringPlant );
        AISetStock( player, 2, c_GB_Node );
        AISetStock( player, 1, c_GB_Fabricator );
        AISetStockUnitNext( player, 22, c_GU_ACR, c_stockIdle );
        AISetStockFarms( player, c_GB_Node, c_stockNormalFarms);
        AISetStock( player, 1, c_GB_AssemblyArray );
        AISetStock( player, 9, c_GB_Uploader );
    }

    GenetronBasicDefenseStock(player);

    AISetStockArmyScale(player, 0.35);

    GenetronGeneralBuild(player, c_ldPhaseOpen);

    AISetStockArmyScale(player, 0.70);

    GenetronUpgradesEasy(player, c_ldPhaseOpen);

    AISetStockArmyScale(player, 1.00);

    AILDStockWorkers( player, 22, c_GU_ACR);

    GenetronTechUp(player, c_ldPhaseOpen);

    if (buildType == e_buildType_Air) {
        AISetStock( player, 1, c_GU_Courier );
    }

    AIEnableStock(player);

    AILDGeneralSharedLogic(player);

    nextState = AITestTimeout(player, timeOut, e_mainState_Mid, e_mainSubState_Init);
}

//--------------------------------------------------------------------------------------------------
//  GenetronMidArmyInitEasy
//--------------------------------------------------------------------------------------------------
int GenetronMidArmyInitEasy (int player, int buildType) {
    int armyRoll = 0;
    int duration = 0;

    if (buildType == e_buildType_Rush) {
        // next attack should be around 10 foodCost and 600 resCost after about 350 seconds
        AIAddToStockArmy(player, c_GU_Spitfire, 3);
        AIAddToStockArmy(player, c_GU_Blitzer, 2);
        // validation: 5 units above with average cost 10 food and 650 resources
        duration = 350 + RandomInt(-15, 15);
    }
    else if (buildType == e_buildType_Timing) {
        // next attack should be around 13 foodCost and 760 resCost after about 400 seconds
        AIAddToStockArmy(player, c_GU_Spitfire, 4);
        AIAddToStockArmy(player, c_GU_Blitzer, 2);
        // validation: 6 units above with average cost 12 food and 750 resources
        duration = 400 + RandomInt(-15, 15);
    }
    else if (buildType == e_buildType_Power) {
        // next attack should be around 13 foodCost and 790 resCost after about 410 seconds
        AIAddToStockArmy(player, c_GU_Spitfire, 3);
        AIAddToStockArmy(player, c_GU_Blitzer, 3);
        // validation: 6 units above with average cost 12 food and 825 resources
        duration = 425 + RandomInt(-15, 15);
    }
    else if (buildType == e_buildType_Macro) {
        // next attack should be around 18 foodCost and 1080 resCost after about 650 seconds
        // note: mid macro build did not send opening attack at 240 time
        AIAddToStockArmy(player, c_GU_Spitfire, 4);
        AIAddToStockArmyPickFrom2Count(player, c_GU_Blitzer, 1, c_GU_Fixer, 2);
        AIAddToStockArmyPickFrom2Count(player, c_GU_Blitzer, 1, c_GU_Fixer, 2);
        // validation: 9 units above with average cost 20 food and 1000 resources
        duration = 600 + RandomInt(-15, 15);
    }
    else if (buildType == e_buildType_Air) {
        // next attack should be around 9 foodCost and 900 resCost after about 400 seconds
        AIAddToStockArmy(player, c_GU_Avenger, 1);
        AIAddToStockArmy(player, c_GU_Boar, 1);
        AIAddToStockArmy(player, c_GU_Hornet, 2);
        // validation: 4 units above with average cost 10 food and 975 resources
        duration = 400 + RandomInt(-20, 20);
    }
    else {
        return GenetronMidArmyInitEasy(player, e_buildType_Macro);
    }

    AISetUserInt(player, c_ldNextArmyRoll, armyRoll);
    return duration;
}

//--------------------------------------------------------------------------------------------------
//  GenetronMidInitEasy
//--------------------------------------------------------------------------------------------------
void GenetronMidInitEasy (int player) {
    int buildType = 0;

    AIChooseNextOpeningBuild(player);
    buildType = AIGetUserInt(player, c_openingBuildType);
    AISetupNextArmy (player, buildType, c_ldPhaseMid, GenetronMidArmyInitEasy);

    AISetFlag(player, e_flagsScouting, true);
    AISetFlag(player, e_flagsLateScout, true);
    AISetFlag(player, e_flagsDetect, true);

    AISetMainState(player, e_mainState_Mid, e_mainSubState_Build);
}

//--------------------------------------------------------------------------------------------------
//  GenetronMidBuildEasy
//--------------------------------------------------------------------------------------------------
void GenetronMidBuildEasy (int player) {
    int buildType = AIGetUserInt(player, c_openingBuildType);
    int armyRoll = AIGetUserInt(player, c_ldNextArmyRoll);
    int timeOut = AIGetUserInt(player, c_nextArmyTime);
    bool nextState = false;

    if (AIHasPlayerChangedCurrentOpening(player)) {
        AISetMainState(player, e_mainState_Mid, e_mainSubState_Init);
        return;
    }

    AIClearStock(player);

    GenetronBasicEconomy(player, c_ldPhaseMid, 14);
    if (buildType == e_buildType_Air) {
        AISetStock( player, 1, c_GU_Courier );
    }
    GenetronBasicExpansion(player, c_ldPhaseMid, 5500, 1500);

    GenetronBasicDefenseStock(player);

    AISetStockArmyScale(player, 0.35);

    GenetronGeneralBuild(player, c_ldPhaseMid);

    AILDStockWorkers( player, 22, c_GU_ACR);

    if (buildType == e_buildType_Rush) {
    }
    else if (buildType == e_buildType_Timing) {
    }
    else if (buildType == e_buildType_Power) {
        if (GenetronMacroExpand(player)) { return; }
    }
    else if (buildType == e_buildType_Macro) {
        if (GenetronMacroExpand(player)) { return; }
    }
    else if (buildType == e_buildType_Air) {
        if (GenetronMacroExpand(player)) { return; }
        AISetStock( player, 2, c_GB_AssemblyArray );
        AISetStock( player, 9, c_GB_Uploader );
    }

    if (AINeedsDetection(player)) {
        AISetStock( player, 1, c_GU_Processor );
    }

    AISetStockArmyScale(player, 0.70);

    AILDStockWorkers( player, 50, c_GU_ACR);

    GenetronUpgradesEasy(player, c_ldPhaseMid);

    AISetStockArmyScale(player, 1.00);

    AISetStock( player, 2, c_GU_Processor );

    GenetronTechUp(player, c_ldPhaseMid);

    AIEnableStock(player);

    AILDGeneralSharedLogic(player);

    nextState = AITestTimeout(player, timeOut, e_mainState_Late, e_mainSubState_Init);
}

//--------------------------------------------------------------------------------------------------
//  GenetronLateArmyInitEasy
//--------------------------------------------------------------------------------------------------
int GenetronLateArmyInitEasy (int player, int buildType) {
    int armyRoll = 0;
    int duration = 0;

    if (buildType == e_buildType_Core) {
        // next attack should be around 17 foodCost and 1000 resCost after about 320 seconds
        armyRoll = RandomInt(1,4);
        if (armyRoll <= 3) {
            AIAddToStockArmy(player, c_GU_Spitfire, 1);
            AIAddToStockArmy(player, c_GU_Blitzer, 2);
            AIAddToStockArmyPickFrom2Count(player, c_GU_Spitfire, 1, c_GU_Fixer, 2);
            AIAddToStockArmyPickFrom2Count(player, c_GU_Blitzer, 1, c_GU_Fixer, 2);
            // validation: 8 units above with average cost 16 food and 1050 resources
            duration = 340 + RandomInt(-15, 15);
        }
        else if (armyRoll <= 4) {
            AIAddToStockArmy(player, c_GU_Spitfire, 3);
            AIAddToStockArmy(player, c_GU_Blitzer, 2);
            AIAddToStockArmy(player, c_GU_Mole_Alias, 2);
            // validation: 6 units above with average cost 12 food and 1100 resources
            duration = 340 + RandomInt(-15, 15);
        }
    }
    else if (buildType == e_buildType_HighTech) {
        // next attack should be around 11 foodCost and 1100 resCost after about 340 seconds
        armyRoll = RandomInt(1,4);
        if (armyRoll <= 3) {
            AIAddToStockArmy(player, c_GU_Blitzer, 3);
            AIAddToStockArmy(player, c_GU_Mole_Alias, 2);
            AIAddToStockArmyPickFrom2Count(player, c_GU_Spitfire, 1, c_GU_Blitzer, 3);
            // validation: 7 units above with average cost 14 food and 1400 resources
            duration = 340 + RandomInt(-15, 15);
        }
        else if (armyRoll <= 4) {
            AIAddToStockArmy(player, c_GU_Blitzer, 3);
            AIAddToStockArmy(player, c_GU_Mole_Alias, 2);
            AIAddToStockArmy(player, c_GU_Virtus, 1);
            // validation: 6 units above with average cost 14 food and 1375 resources
            duration = 360 + RandomInt(-15, 15);
        }
    }
    else if (buildType == e_buildType_Special) {
        // next attack should be around 20 foodCost and 1200 resCost after about 360 seconds
        armyRoll = RandomInt(1,2);
        if (armyRoll <= 1) {
            AIAddToStockArmy(player, c_GU_Spitfire, 2);
            AIAddToStockArmy(player, c_GU_Aquila, 2);
            AIAddToStockArmyPickFrom2Count(player, c_GU_Fixer, 1, c_GU_Blitzer, 2);
            AIAddToStockArmyPickFrom2Count(player, c_GU_Fixer, 1, c_GU_Blitzer, 2);
            // validation: 7 units above with average cost 18 food and 1350 resources
            duration = 370 + RandomInt(-15, 15);
        }
        else if (armyRoll <= 2) {
            AIAddToStockArmy(player, c_GU_Spitfire, 2);
            AIAddToStockArmy(player, c_GU_Blitzer, 2);
            AIAddToStockArmy(player, c_GU_Mole_Alias, 2);
            AIAddToStockArmy(player, c_GU_Jupiter, 1);
            // validation: 6 units above with average cost 14 food and 1350 resources
            duration = 370 + RandomInt(-15, 15);
        }
    }
    else if (buildType == e_buildType_Mixed) {
        // next attack should be around 22 foodCost and 1500 resCost after about 400 seconds
        armyRoll = RandomInt(1,5);
        if (armyRoll <= 2) {
            AIAddToStockArmy(player, c_GU_Spitfire, 3);
            AIAddToStockArmy(player, c_GU_Blitzer, 3);
            AIAddToStockArmyPickFrom2Count(player, c_GU_Aquila, 1, c_GU_Fixer, 2);
            AIAddToStockArmyPickFrom2Count(player, c_GU_Equalizer, 1, c_GU_Fixer, 2);
            AIAddToStockArmyPickFrom2Count(player, c_GU_Equalizer, 1, c_GU_Fixer, 2);
            // validation: 10 units above with average cost 21 food and 1500 resources
            duration = 400 + RandomInt(-15, 15);
        }
        else if (armyRoll <= 4) {
            AIAddToStockArmy(player, c_GU_Spitfire, 2);
            AIAddToStockArmy(player, c_GU_Blitzer, 2);
            AIAddToStockArmy(player, c_GU_Inciter, 2);
            AIAddToStockArmy(player, c_GU_Mole_Alias, 2);
            // validation: 8 units above with average cost 18 food and 1600 resources
            duration = 400 + RandomInt(-15, 15);
        }
        else if (armyRoll <= 5) {
            AIAddToStockArmy(player, c_GU_Spitfire, 3);
            AIAddToStockArmy(player, AIPickFrom2(c_GU_Badger, c_GU_Virtus), 3);
            // validation: 5 units above with average cost 21 food and 1650 resources
            duration = 420 + RandomInt(-15, 15);
        }
    }
    else if (buildType == e_buildType_Air) {
        // next attack should be around 8 foodCost and 800 resCost after about 360 seconds
        armyRoll = RandomInt(1,2);
        if (armyRoll <= 1) {
            AIAddToStockArmy(player, c_GU_Avenger, 1);
            AIAddToStockArmy(player, c_GU_Hornet, 2);
            AIAddToStockArmy(player, AIPickFrom2(c_GU_Avenger, c_GU_Hornet), 2);
            // validation: 5 units above with average cost 8 food and 1075 resources
            duration = 350 + RandomInt(-15, 15);
        }
        else if (armyRoll <= 2) {
            AIAddToStockArmy(player, c_GU_Avenger, 1);
            AIAddToStockArmy(player, c_GU_Badger, 2);
            // validation: 3 units above with average cost 8 food and 1275 resources
            duration = 380 + RandomInt(-15, 15);
        }
    }
    else {
        return GenetronLateArmyInitEasy(player, e_buildType_Core);
    }

    AISetUserInt(player, c_ldNextArmyRoll, armyRoll);
    return duration;
}

//--------------------------------------------------------------------------------------------------
//  GenetronFinalArmyInitEasy
//--------------------------------------------------------------------------------------------------
int GenetronFinalArmyInitEasy (int player, int buildType) {
    int armyRoll = 0;
    int duration = 0;

    if (buildType == e_buildType_Core) {
        armyRoll = RandomInt(1,4);
        if (armyRoll <= 3) {
            AIAddToStockArmy(player, c_GU_Spitfire, 7);
            AIAddToStockArmy(player, c_GU_Blitzer, 5);
            AIAddToStockArmyPickFrom2Count(player, c_GU_Blitzer, 1, c_GU_Fixer, 2);
            AIAddToStockArmyPickFrom2Count(player, c_GU_Blitzer, 1, c_GU_Fixer, 2);
            // validation: 15 units above with average cost 36 food and 2175 resources
            duration = 310 + RandomInt(-11, 16);
        }
        else if (armyRoll <= 4) {
            AIAddToStockArmy(player, c_GU_Spitfire, 6);
            AIAddToStockArmy(player, c_GU_Blitzer, 4);
            AIAddToStockArmy(player, c_GU_Mole_Alias, 4);
            // validation: 10 units above with average cost 32 food and 2200 resources
            duration = 330 + RandomInt(-10, 15);
        }
    }
    else if (buildType == e_buildType_HighTech) {
        armyRoll = RandomInt(1,4);
        if (armyRoll <= 3) {
            AIAddToStockArmy(player, c_GU_Spitfire, 5);
            AIAddToStockArmy(player, c_GU_Torrent, 3);
            AIAddToStockArmy(player, c_GU_Mole_Alias, 2);
            AIAddToStockArmy(player, c_GU_Inciter, 2);
            // validation: 17 units above with average cost 32 food and 2000 resources
            duration = 340 + RandomInt(-11, 16);
        }
        else if (armyRoll <= 4) {
            AIAddToStockArmy(player, c_GU_Torrent, 3);
            AIAddToStockArmy(player, c_GU_Mole_Alias, 2);
            AIAddToStockArmy(player, c_GU_Tesla, 1);
            AIAddToStockArmy(player, c_GU_Virtus, 2);
            // validation: 8 units above with average cost 25 food and 2025 resources
            duration = 320 + RandomInt(-15, 15);
        }
    }
    else if (buildType == e_buildType_Special) {
        armyRoll = RandomInt(1,2);
        if (armyRoll <= 1) {
            AIAddToStockArmy(player, c_GU_Spitfire, 5);
            AIAddToStockArmy(player, c_GU_Blitzer, 3);
            AIAddToStockArmy(player, c_GU_Aquila, 2);
            AIAddToStockArmyPickFrom2Count(player, c_GU_Aquila, 2, c_GU_Fixer, 4);
            // validation: 13 units above with average cost 33 food and 2125 resources
            duration = 360 + RandomInt(-15, 15);
        }
        else if (armyRoll <= 2) {
            AIAddToStockArmy(player, c_GU_Spitfire, 4);
            AIAddToStockArmy(player, c_GU_Torrent, 4);
            AIAddToStockArmy(player, c_GU_Tesla, 2);
            AIAddToStockArmyPickFrom2Count(player, c_GU_Mole_Alias, 2, c_GU_Equalizer, 3);
            // validation: 13 units above with average cost 30 food and 2187 resources
            duration = 340 + RandomInt(-15, 15);
        }
    }
    else if (buildType == e_buildType_Mixed) {
        armyRoll = RandomInt(1,5);
        if (armyRoll <= 2) {
            AIAddToStockArmy(player, c_GU_Spitfire, 4);
            AIAddToStockArmy(player, c_GU_Blitzer, 4);
            AIAddToStockArmyPickFrom2Count(player, c_GU_Aquila, 3, c_GU_Fixer, 6);
            // validation: 12 units above with average cost 26 food and 1925 resources
            duration = 370 + RandomInt(-15, 15);
        }
        else if (armyRoll <= 4) {
            AIAddToStockArmy(player, c_GU_Spitfire, 5);
            AIAddToStockArmy(player, c_GU_Blitzer, 3);
            AIAddToStockArmy(player, c_GU_Mole_Alias, 2);
            AIAddToStockArmyPickFrom2Count(player, c_GU_Fixer, 4, c_GU_Equalizer, 3);
            // validation: 13 units above with average cost 37 food and 1988 resources
            duration = 370 + RandomInt(-15, 15);
        }
        else if (armyRoll <= 5) {
            AIAddToStockArmy(player, c_GU_Spitfire, 4);
            AIAddToStockArmy(player, c_GU_Blitzer, 4);
            AIAddToStockArmy(player, AIPickFrom2(c_GU_Badger, c_GU_Virtus), 2);
            AIAddToStockArmy(player, AIPickFrom2(c_GU_Badger, c_GU_Virtus), 2);
            // validation: 10 units above with average cost 36 food and 2225 resources
            duration = 400 + RandomInt(-15, 15);
        }
    }
    else if (buildType == e_buildType_Air) {
        armyRoll = RandomInt(1,2);
        if (armyRoll <= 1) {
            AIAddToStockArmy(player, c_GU_Avenger, 3);
            AIAddToStockArmy(player, c_GU_Hornet, 3);
            AIAddToStockArmyPickFrom2Count(player, c_GU_Hornet, 2, c_GU_Boar, 1);
            AIAddToStockArmyPickFrom2Count(player, c_GU_Hornet, 2, c_GU_Boar, 1);
            // validation: 9 units above with average cost 24 food and 2050 resources
            duration = 340 + RandomInt(-15, 15);
        }
        else if (armyRoll <= 2) {
            AIAddToStockArmy(player, c_GU_Hornet, 2);
            AIAddToStockArmy(player, c_GU_Boar, 2);
            AIAddToStockArmy(player, c_GU_Badger, 2);
            // validation: 6 units above with average cost 24 food and 2050 resources
            duration = 380 + RandomInt(-15, 15);
        }
    }
    else {
        return GenetronFinalArmyInitEasy(player, e_buildType_Core);
    }

    AISetUserInt(player, c_ldNextArmyRoll, armyRoll);
    return duration;
}

//--------------------------------------------------------------------------------------------------
//  GenetronLateInitEasy
//--------------------------------------------------------------------------------------------------
void GenetronLateInitEasy (int player) {
    int lateLoop = AIGetUserInt(player, c_ldNumLateLoops);
    int curPhase = c_ldPhaseLate;
    int buildType = 0;

    AIChooseNextLateGameBuild(player);
    buildType = AIGetUserInt(player, c_lateGameBuildType);

    if (lateLoop <= 0) { // First Late Loop
        AISetupNextArmy (player, buildType, curPhase, GenetronLateArmyInitEasy);
    } else {
        curPhase = c_ldPhaseFinal + lateLoop;
        AISetupNextArmy (player, buildType, curPhase, GenetronFinalArmyInitEasy);
    }

    AISetFlag(player, e_flagsScouting, true);
    AISetFlag(player, e_flagsClearObs, true);
    AISetFlag(player, e_flagsLateScout, true);
    AISetFlag(player, e_flagsDetect, true);

    AISetMainState(player, e_mainState_Late, e_mainSubState_Build);
}

//--------------------------------------------------------------------------------------------------
//  GenetronLateBuildEasy
//--------------------------------------------------------------------------------------------------
void GenetronLateBuildEasy (int player) {
    int lateLoop = AIGetUserInt(player, c_ldNumLateLoops);
    int buildType = AIGetUserInt(player, c_lateGameBuildType);
    int armyRoll = AIGetUserInt(player, c_ldNextArmyRoll);
    int timeOut = AIGetUserInt(player, c_nextArmyTime);
    bool nextState = false;

    if (AIHasPlayerChangedCurrentLateGame(player)) {
        AISetMainState(player, e_mainState_Late, e_mainSubState_Init);
        return;
    }

    AIClearStock(player);

    GenetronBasicEconomy(player, c_ldPhaseLate, 16);
    if (buildType == e_buildType_Air) {
        AISetStock( player, 1, c_GU_Courier );
    }
    GenetronBasicExpansion(player, c_ldPhaseLate, 8000, 2000);

    GenetronBasicDefenseStock(player);

    AISetStockArmyScale(player, 0.35);

    GenetronGeneralBuild(player, c_ldPhaseLate);

    AILDStockWorkers( player, 22, c_GU_ACR);

    if (buildType == e_buildType_Core) {
        if (GenetronMacroExpand(player)) { return; }
        AISetStockUnitNext( player, 2, c_GB_Manufacturer, c_stockIdle );
        AISetStockUnitNext( player, 1, c_GB_Fabricator, c_stockIdle );
        AISetStockUnitNext( player, 1, c_GB_AssemblyArray, c_stockIdle );
        AISetStockUnitNext( player, 12, c_GB_Uploader, c_stockIdle );
    }
    else if (buildType == e_buildType_HighTech) {
        if (GenetronMacroExpand(player)) { return; }
        AISetStockUnitNext( player, 1, c_GB_Manufacturer, c_stockIdle );
        AISetStockUnitNext( player, 2, c_GB_Fabricator, c_stockIdle );
        AISetStockUnitNext( player, 1, c_GB_AssemblyArray, c_stockIdle );
        AISetStockUnitNext( player, 12, c_GB_Uploader, c_stockIdle );
    }
    else if (buildType == e_buildType_Special) {
        if (GenetronMacroExpand(player)) { return; }
        AISetStockUnitNext( player, 1, c_GB_Manufacturer, c_stockIdle );
        AISetStockUnitNext( player, 2, c_GB_Fabricator, c_stockIdle );
        AISetStockUnitNext( player, 1, c_GB_AssemblyArray, c_stockIdle );
        AISetStockUnitNext( player, 12, c_GB_Uploader, c_stockIdle );
    }
    else if (buildType == e_buildType_Mixed) {
        if (GenetronMacroExpand(player)) { return; }
        AISetStockUnitNext( player, 2, c_GB_Manufacturer, c_stockIdle );
        AISetStockUnitNext( player, 1, c_GB_Fabricator, c_stockIdle );
        AISetStockUnitNext( player, 1, c_GB_AssemblyArray, c_stockIdle );
        AISetStockUnitNext( player, 12, c_GB_Uploader, c_stockIdle );
    }
    else if (buildType == e_buildType_Air) {
        if (GenetronMacroExpand(player)) { return; }
        AISetStockUnitNext( player, 1, c_GB_Manufacturer, c_stockIdle );
        AISetStockUnitNext( player, 1, c_GB_Fabricator, c_stockIdle );
        AISetStockUnitNext( player, 2, c_GB_AssemblyArray, c_stockIdle );
        AISetStockUnitNext( player, 12, c_GB_Uploader, c_stockIdle );
    }

    AISetStock( player, 2, c_GU_Processor );

    AISetStockArmyScale(player, 0.70);

    AISetStock( player, 2, c_GU_Courier );
    AISetStock( player, 3, c_GU_Processor );

    AISetStockArmyScale(player, 1.00);

    AILDStockWorkers( player, 50, c_GU_ACR);

    if (lateLoop <= 0) { // First Late Loop
        GenetronUpgradesEasy(player, c_ldPhaseLate);
        GenetronTechUp(player, c_ldPhaseLate);
    } else { // Remaining Loops
        GenetronUpgradesEasy(player, c_ldPhaseFinal);
        GenetronTechUp(player, c_ldPhaseFinal);
    }

    AIEnableStock(player);

    AILDGeneralSharedLogic(player);

    nextState = AITestTimeout(player, timeOut, e_mainState_Late, e_mainSubState_Init);
    if (nextState) {
        lateLoop += 1;
        AISetUserInt(player, c_ldNumLateLoops, lateLoop);
    }
}

//--------------------------------------------------------------------------------------------------
//  GenetronOpenEasy
//--------------------------------------------------------------------------------------------------
void GenetronOpenEasy (int player) {
    int mainSubState = AIState(player, e_mainSubState);

    if (mainSubState != e_mainSubState_Build) {
        GenetronOpenInitEasy(player);
        mainSubState = AIState(player, e_mainSubState);
    }

    if (mainSubState == e_mainSubState_Build) { GenetronOpenBuildEasy(player); }
    else { ErrorMeleeScript(player, "Invalid Open MainSubState GenetronEasy"); }
}

//--------------------------------------------------------------------------------------------------
//  GenetronMidEasy
//--------------------------------------------------------------------------------------------------
void GenetronMidEasy (int player) {
    int mainSubState = AIState(player, e_mainSubState);

    if (mainSubState != e_mainSubState_Build) {
        GenetronMidInitEasy(player);
        mainSubState = AIState(player, e_mainSubState);
    }

    if (mainSubState == e_mainSubState_Build) { GenetronMidBuildEasy(player);  }
    else { ErrorMeleeScript(player, "Invalid Mid MainSubState GenetronEasy"); }
}

//--------------------------------------------------------------------------------------------------
//  GenetronLateEasy
//--------------------------------------------------------------------------------------------------
void GenetronLateEasy (int player) {
    int mainSubState = AIState(player, e_mainSubState);

    if (mainSubState != e_mainSubState_Build) {
        GenetronLateInitEasy(player);
        mainSubState = AIState(player, e_mainSubState);
    }

    if (mainSubState == e_mainSubState_Build) { GenetronLateBuildEasy(player);  }
    else { ErrorMeleeScript(player, "Invalid Late MainSubState GenetronEasy"); }
}

