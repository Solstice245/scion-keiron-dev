//==================================================================================================
//  Keiron Easy Skirmish AI
//==================================================================================================

//--------------------------------------------------------------------------------------------------
//  KeironUpgradesEasy
//--------------------------------------------------------------------------------------------------
void KeironUpgradesEasy (int player, int phase) {
  int buildType;

  if (phase < c_ldPhaseLate) {
      buildType = AIGetUserInt(player, c_openingBuildType);
  } else {
      buildType = AIGetUserInt(player, c_lateGameBuildType);
  }

  if (buildType != e_buildType_Air) {


      if (phase >= c_ldPhaseMid) {


          if (phase >= c_ldPhaseLate) {

              AISetStock( player, 1, c_KR_BioWeapons1);
              AISetStock( player, 1, c_KR_BioArmor1);

              if (phase >= c_ldPhaseFinal) {

                  AISetStock( player, 1, c_KR_BioWeapons2);
                  AISetStock( player, 1, c_KR_BioArmor2);
                  AISetStock( player, 1, c_KR_MechWeapons1);
                  AISetStock( player, 1, c_KR_MechArmor1);
                  AISetStock( player, 1, c_KR_Shields1);

              }
          }
      }
  }
  else {  // (buildType == e_buildType_Air) 


      if (phase >= c_ldPhaseMid) {


          if (phase >= c_ldPhaseLate) {

              AISetStock( player, 1, c_KR_BioWeapons1);
              AISetStock( player, 1, c_KR_BioArmor1);

              if (phase >= c_ldPhaseFinal) {

                  AISetStock( player, 1, c_KR_BioWeapons2);
                  AISetStock( player, 1, c_KR_BioArmor2);
                  AISetStock( player, 1, c_KR_MechWeapons1);
                  AISetStock( player, 1, c_KR_MechArmor1);
                  AISetStock( player, 1, c_KR_Shields1);

              }
          }
      }
  }
}

//--------------------------------------------------------------------------------------------------
//  KeironOpenArmyInitEasy
//--------------------------------------------------------------------------------------------------
int KeironOpenArmyInitEasy (int player, int buildType) {
  int armyRoll = 0;
  int duration = 0;

  if (buildType == e_buildType_Rush) {
      // next attack should be around 2 foodCost and 300 resCost after about 375 seconds
      AIAddToStockArmy(player, c_KU_Volt, 3);
      AIAddToStockArmy(player, c_KU_Pariah, 3);
      // validation: above with average cost 6 food and 300 resources
      duration = 360 + RandomInt(-15, 15);
  }
  else if (buildType == e_buildType_Timing) {
      // next attack should be around 7 foodCost and 400 resCost after about 430 seconds
      AIAddToStockArmy(player, c_KU_Volt, 6);
      AIAddToStockArmy(player, c_KU_Pariah, 2);
      // validation: units above with average cost 8 food and 400 resources
      duration = 430 + RandomInt(-20, 20);
  }
  else if (buildType == e_buildType_Power) {
      // next attack should be around 9 foodCost and 540 resCost after about 562 seconds
      AIAddToStockArmy(player, c_KU_Volt, 3);
      AIAddToStockArmy(player, c_KU_Pulsar, 2);
      // validation: 3 units above with average cost 10 food and 550 resources
      duration = 570 + RandomInt(-22, 22);
  }
  else if (buildType == e_buildType_Macro) {
      // next attack should be around 5 foodCost and 300 resCost after about 225 seconds
      AIAddToStockArmy(player, c_KU_Volt, 2);
      AIAddToStockArmy(player, c_KU_Pariah, 1);
      // validation: 2 units above with average cost 2 food and 150 resources
      duration = 220 + RandomInt(-9, 9);
  }
  else if (buildType == e_buildType_Air) {
      // next attack should be around 6 foodCost and 600 resCost after about 581 seconds
      AIAddToStockArmy(player, c_KU_Echo, 1);
      AIAddToStockArmy(player, c_KU_Aurora, 2);
      // validation: 3 units above with average cost 6 food and 750 resources
      duration = 610 + RandomInt(-26, 26);
  }
  else {
      return KeironOpenArmyInitEasy(player, e_buildType_Macro);
  }

  AISetUserInt(player, c_ldNextArmyRoll, armyRoll);
  return duration;
}

//--------------------------------------------------------------------------------------------------
//  KeironOpenInitEasy
//--------------------------------------------------------------------------------------------------
void KeironOpenInitEasy (int player) {
  int buildType = 0;

  AIChooseNextOpeningBuild(player);
  buildType = AIGetUserInt(player, c_openingBuildType);
  AISetupNextArmy (player, buildType, c_ldPhaseOpen, KeironOpenArmyInitEasy);

  AISetMainState(player, e_mainState_Open, e_mainSubState_Build);
}

//--------------------------------------------------------------------------------------------------
//  KeironOpenBuildEasy
//--------------------------------------------------------------------------------------------------
void KeironOpenBuildEasy (int player) {
  int buildType = AIGetUserInt(player, c_openingBuildType);
  int armyRoll = AIGetUserInt(player, c_ldNextArmyRoll);
  int timeOut = AIGetUserInt(player, c_nextArmyTime);
  bool nextState = false;

  if (AIHasPlayerChangedCurrentOpening(player)) {
      AISetMainState(player, e_mainState_Open, e_mainSubState_Init);
      return;
  }

  AIClearStock(player);

  if (buildType == e_buildType_Rush) {
      AISetStock( player, 1, c_KB_Citadel_Alias );
      AISetStock( player, 16, c_KU_Converter );
      AISetStock( player, 1, c_KB_Edifice );
      AISetStock( player, 1, c_KB_Formulator );
      AISetStock( player, 1, c_KU_Volt );
      AISetStock( player, 1, c_KB_CitadelCharged );
      AISetStock( player, 1, c_KB_Reliquary );
      AISetStockFarms( player, c_KB_Edifice, c_stockNormalFarms);
  }
  else if (buildType == e_buildType_Timing) {
      AISetStock( player, 1, c_KB_Citadel_Alias );
      AISetStock( player, 16, c_KU_Converter );
      AISetStock( player, 1, c_KB_Edifice );
      AISetStock( player, 1, c_KB_Formulator );
      AISetStock( player, 1, c_KU_Volt );
      AISetStock( player, 1, c_KB_CitadelCharged );
      AISetStock( player, 1, c_KB_Reliquary );
      AISetStockFarms( player, c_KB_Edifice, c_stockNormalFarms);
      AISetStock( player, 2, c_KB_Formulator );
  }
  else if (buildType == e_buildType_Power) {
      AISetStock( player, 1, c_KB_Citadel_Alias );
      AISetStock( player, 16, c_KU_Converter );
      AISetStock( player, 1, c_KB_Edifice );
      AISetStock( player, 1, c_KB_Formulator );
      AISetStock( player, 1, c_KU_Volt );
      AISetStock( player, 1, c_KB_CitadelCharged );
      AISetStock( player, 1, c_KB_Reliquary );
      AISetStock( player, 1, c_KB_Sanctum );
      AISetStockFarms( player, c_KB_Edifice, c_stockNormalFarms);
      AISetStock( player, 2, c_KB_Formulator );
  }
  else if (buildType == e_buildType_Macro) {
      AISetStock( player, 1, c_KB_Citadel_Alias );
      AISetStock( player, 16, c_KU_Converter );
      AISetStock( player, 1, c_KB_Edifice );
      if (KeironMacroExpand(player)) { return; }
      AISetStock( player, 1, c_KB_Formulator );
      AISetStock( player, 1, c_KU_Volt );
      AISetStock( player, 1, c_KB_CitadelCharged );
      AISetStock( player, 1, c_KB_Reliquary );
      AISetStock( player, 1, c_KB_Sanctum );
      AISetStockUnitNext( player, 22, c_KU_Converter, c_stockIdle );
      AISetStockFarms( player, c_KB_Edifice, c_stockNormalFarms );
      AISetStock( player, 2, c_KB_Formulator );
  }
  else if (buildType == e_buildType_Air) {
      AISetStock( player, 1, c_KB_Citadel_Alias );
      AISetStock( player, 16, c_KU_Converter );
      AISetStock( player, 1, c_KB_Edifice );
      if (KeironMacroExpand(player)) { return; }
      AISetStock( player, 1, c_KB_Formulator );
      AISetStock( player, 1, c_KB_Edifice );
      AISetStock( player, 2, c_KB_Formulator );
      AISetStock( player, 1, c_KB_Sanctum );
      AISetStock( player, 1, c_KB_CitadelCharged );
      AISetStockUnitNext( player, 22, c_KU_Converter, c_stockIdle );
      AISetStockFarms( player, c_KB_Edifice, c_stockNormalFarms );
      AISetStock( player, 1, c_KB_Conduit );
      AISetStock( player, 1, c_KB_Outlet );
  }

  KeironBasicDefenseStock(player);

  AISetStockArmyScale(player, 0.35);

  KeironGeneralBuild(player, c_ldPhaseOpen);

  AISetStockArmyScale(player, 0.70);

  KeironUpgradesEasy(player, c_ldPhaseOpen);

  AISetStockArmyScale(player, 1.00);

  AILDStockWorkers( player, 22, c_KU_Converter);

  KeironTechUp(player, c_ldPhaseOpen);

  if (buildType == e_buildType_Air) {
      AISetStock( player, 1, c_KU_Aperture );
  }

  AIEnableStock(player);

  AILDGeneralSharedLogic(player);

  nextState = AITestTimeout(player, timeOut, e_mainState_Mid, e_mainSubState_Init);
}

//--------------------------------------------------------------------------------------------------
//  KeironMidArmyInitEasy
//--------------------------------------------------------------------------------------------------
int KeironMidArmyInitEasy (int player, int buildType) {
  int armyRoll = 0;
  int duration = 0;

  if (buildType == e_buildType_Rush) {
      // next attack should be around 10 foodCost and 600 resCost after about 340 seconds
      AIAddToStockArmy(player, c_KU_Volt, 3);
      AIAddToStockArmy(player, c_KU_Pulsar, 2);
      AIAddToStockArmy(player, AIPickFrom2(c_KU_Volt, c_KU_Pariah), 3);
      // validation: 8 units above with average cost 12 food and 600 resources
      duration = 340 + RandomInt(-15, 15);
  }
  else if (buildType == e_buildType_Timing) {
      // next attack should be around 13 foodCost and 760 resCost after about 380 seconds
      AIAddToStockArmy(player, c_KU_Volt, 3);
      AIAddToStockArmy(player, c_KU_Pulsar, 2);
      AIAddToStockArmy(player, AIPickFrom2(c_KU_Pulsar, c_KU_Cataract), 1);
      // validation: 6 units above with average cost 12 food and 750 resources
      duration = 390 + RandomInt(-15, 15);
  }
  else if (buildType == e_buildType_Power) {
      // next attack should be around 13 foodCost and 790 resCost after about 400 seconds
      AIAddToStockArmy(player, c_KU_Volt, 4);
      AIAddToStockArmy(player, c_KU_Pulsar, 1);
      AIAddToStockArmy(player, AIPickFrom2(c_KU_Pulsar, c_KU_Cataract), 1);
      AIAddToStockArmy(player, AIPickFrom2(c_KU_Pulsar, c_KU_Cataract), 1);
      // validation: 6 units above with average cost 12 food and 800 resources
      duration = 420 + RandomInt(-15, 15);
  }
  else if (buildType == e_buildType_Macro) {
      // next attack should be around 18 foodCost and 1080 resCost after about 581 seconds
      // note: mid macro build did not send opening attack at 225 time
      AIAddToStockArmy(player, c_KU_Volt, 8);
      AIAddToStockArmy(player, c_KU_Pulsar, 2);
      AIAddToStockArmyPickFrom2Count(player, c_KU_Cataract, 1, c_KU_Pariah, 3);
      AIAddToStockArmyPickFrom2Count(player, c_KU_Cataract, 1, c_KU_Pariah, 3);
      // validation: 14 units above with average cost 9 food and 1175 resources
      duration = 620 + RandomInt(-35, 35);
  }
  else if (buildType == e_buildType_Air) {
      // next attack should be around 9 foodCost and 900 resCost after about 380 seconds
      AIAddToStockArmy(player, c_KU_Echo, 2);
      AIAddToStockArmy(player, c_KU_Aurora, 2);
      // validation: 3 units above with average cost 6 food and 675 resources
      duration = 400 + RandomInt(-15, 15);
  }
  else {
      return KeironMidArmyInitEasy(player, e_buildType_Macro);
  }

  AISetUserInt(player, c_ldNextArmyRoll, armyRoll);
  return duration;
}

//--------------------------------------------------------------------------------------------------
//  KeironMidInitEasy
//--------------------------------------------------------------------------------------------------
void KeironMidInitEasy (int player) {
  int buildType = 0;

  AIChooseNextOpeningBuild(player);
  buildType = AIGetUserInt(player, c_openingBuildType);
  AISetupNextArmy (player, buildType, c_ldPhaseMid, KeironMidArmyInitEasy);

  AISetFlag(player, e_flagsScouting, true);
  AISetFlag(player, e_flagsLateScout, true);
  AISetFlag(player, e_flagsDetect, true);

  AISetMainState(player, e_mainState_Mid, e_mainSubState_Build);
}

//--------------------------------------------------------------------------------------------------
//  KeironMidBuildEasy
//--------------------------------------------------------------------------------------------------
void KeironMidBuildEasy (int player) {
  int buildType = AIGetUserInt(player, c_openingBuildType);
  int armyRoll = AIGetUserInt(player, c_ldNextArmyRoll);
  int timeOut = AIGetUserInt(player, c_nextArmyTime);
  bool nextState = false;

  if (AIHasPlayerChangedCurrentOpening(player)) {
      AISetMainState(player, e_mainState_Mid, e_mainSubState_Init);
      return;
  }

  AIClearStock(player);

  KeironBasicEconomy(player, c_ldPhaseMid, 16);
  if (buildType == e_buildType_Air) {
      AISetStock( player, 1, c_KU_Aperture );
  }
  KeironBasicExpansion(player, c_ldPhaseMid, 5500, 1500);

  KeironBasicDefenseStock(player);

  AISetStockArmyScale(player, 0.35);

  KeironGeneralBuild(player, c_ldPhaseMid);

  AILDStockWorkers( player, 22, c_KU_Converter);

  if (buildType == e_buildType_Rush) {
      AISetStock( player, 1, c_KB_Sanctum );
  }
  else if (buildType == e_buildType_Timing) {
      AISetStock( player, 1, c_KB_Sanctum );
  }
  else if (buildType == e_buildType_Power) {
      if (KeironMacroExpand(player)) { return; }
      AISetStock( player, 1, c_KB_Foundry );
  }
  else if (buildType == e_buildType_Macro) {
      if (KeironMacroExpand(player)) { return; }
      AISetStock( player, 1, c_KB_Foundry );
  }
  else if (buildType == e_buildType_Air) {
      if (KeironMacroExpand(player)) { return; }
      AISetStock( player, 2, c_KB_Outlet );
      AISetStock( player, 1, c_KB_Empyrean );
  }

  if (AINeedsDetection(player)) {
      AISetStock( player, 1, c_KU_Paradox );
  }

  AISetStockArmyScale(player, 0.70);

  AILDStockWorkers( player, 50, c_KU_Converter);

  KeironUpgradesEasy(player, c_ldPhaseMid);

  AISetStockArmyScale(player, 1.00);

  AISetStock( player, 2, c_KU_Paradox );
  AISetStock( player, 1, c_KB_CitadelCharged );

  KeironTechUp(player, c_ldPhaseMid);

  AIEnableStock(player);

  AILDGeneralSharedLogic(player);

  nextState = AITestTimeout(player, timeOut, e_mainState_Late, e_mainSubState_Init);
}

//--------------------------------------------------------------------------------------------------
//  KeironLateArmyInitEasy
//--------------------------------------------------------------------------------------------------
int KeironLateArmyInitEasy (int player, int buildType) {
  int armyRoll = 0;
  int duration = 0;

  if (buildType == e_buildType_Core) {
      // next attack should be around 17 foodCost and 1000 resCost after about 320 seconds
      armyRoll = RandomInt(1,4);
      if (armyRoll <= 3) {
          AIAddToStockArmy(player, c_KU_Volt, 8);
          AIAddToStockArmy(player, c_KU_Pulsar, 2);
          AIAddToStockArmyPickFrom2Count(player, c_KU_Cataract, 1, c_KU_Pariah, 4);
          // validation: 12 units above with average cost 17 food and 1000 resources
          duration = 320 + RandomInt(-15, 15);
      }
      else if (armyRoll <= 4) {
          AIAddToStockArmy(player, c_KU_Volt, 6);
          AIAddToStockArmy(player, c_KU_Pulsar, 2);
          AIAddToStockArmy(player, c_KU_Cataract, 2);
          // validation: 10 units above with average cost 16 food and 1100 resources
          duration = 340 + RandomInt(-15, 15);
      }
  }
  else if (buildType == e_buildType_HighTech) {
      // next attack should be around 19 foodCost and 1100 resCost after about 340 seconds
      armyRoll = RandomInt(1,4);
      if (armyRoll <= 3) {
          AIAddToStockArmy(player, c_KU_Volt, 8);
          AIAddToStockArmy(player, c_KU_Umbra, 3);
          // validation: 11 units above with average cost 14 food and 1150 resources
          duration = 325 + RandomInt(-15, 15);
      }
      else if (armyRoll <= 4) {
          AIAddToStockArmy(player, c_KU_Cataract, 1);
          AIAddToStockArmy(player, c_KU_Umbra, 1);
          AIAddToStockArmy(player, c_KU_Inducer, 1);
          AIAddToStockArmy(player, c_KU_Myriad, 1);
          // validation: 2 units above with average cost 9 food and 1400 resources
          duration = 380 + RandomInt(-15, 15);
      }
  }
  else if (buildType == e_buildType_Special) {
      // next attack should be around 20 foodCost and 1200 resCost after about 360 seconds
      armyRoll = RandomInt(1,2);
      if (armyRoll <= 1) {
          AIAddToStockArmy(player, c_KU_Volt, 6);
          AIAddToStockArmy(player, c_KU_Pulsar, 2);
          AIAddToStockArmy(player, c_KU_Meridian, 2);
          // validation: 10 units above with average cost 18 food and 1350 resources
          duration = 370 + RandomInt(-15, 15);
      }
      else if (armyRoll <= 2) {
          AIAddToStockArmy(player, c_KU_Volt, 6);
          AIAddToStockArmy(player, c_KU_Umbra, 2);
          AIAddToStockArmy(player, c_KU_Meridian, 2);
          // validation: 10 units above with average cost 16 food and 1450 resources
          duration = 380 + RandomInt(-15, 15);
      }
  }
  else if (buildType == e_buildType_Mixed) {
      // next attack should be around 22 foodCost and 1300 resCost after about 380 seconds
      armyRoll = RandomInt(1,5);
      if (armyRoll <= 2) {
          AIAddToStockArmy(player, c_KU_Pulsar, 2);
          AIAddToStockArmy(player, c_KU_Cataract, 2);
          AIAddToStockArmyPickFrom2Count(player, c_KU_Meridian, 1, c_KU_Pariah, 6);
          AIAddToStockArmyPickFrom2Count(player, c_KU_Meridian, 1, c_KU_Pariah, 6);
          // validation: 10 units above with average cost 19 food and 1425 resources
          duration = 390 + RandomInt(-15, 15);
      }
      else if (armyRoll <= 4) {
          AIAddToStockArmy(player, c_KU_Volt, 4);
          AIAddToStockArmy(player, c_KU_Cataract, 3);
          AIAddToStockArmy(player, c_KU_Pariah, 4);
          AIAddToStockArmy(player, c_KU_Umbra, 2);
          // validation: 8 units above with average cost 13 food and 1500 resources
          duration = 410 + RandomInt(-15, 15);
      }
      else if (armyRoll <= 5) {
          AIAddToStockArmy(player, c_KU_Volt, 6);
          AIAddToStockArmy(player, c_KU_Cataract, 2);
          AIAddToStockArmy(player, AIPickFrom2(c_KU_Paragon, c_KU_Titan), 1);
          // validation: 9 units above with average cost 17 food and 1325 resources
          duration = 380 + RandomInt(-15, 15);
      }
  }
  else if (buildType == e_buildType_Air) {
      // next attack should be around 8 foodCost and 800 resCost after about 360 seconds
      armyRoll = RandomInt(1,2);
      if (armyRoll <= 1) {
          AIAddToStockArmy(player, c_KU_Echo, 1);
          AIAddToStockArmy(player, c_KU_Aurora, 1);
          AIAddToStockArmy(player, AIPickFrom2(c_KU_Harbinger, c_KU_Aurora), 1);
          // validation: 3 units above with average cost 8 food and 712 resources
          duration = 344 + RandomInt(-11, 17);
      }
      else if (armyRoll <= 2) {
          AIAddToStockArmy(player, c_KU_Echo, 1);
          AIAddToStockArmy(player, c_KU_Paragon, 1);
          // validation: 2 units above with average cost 8 food and 925 resources
          duration = 383 + RandomInt(-12, 19);
      }
  }
  else {
      return KeironLateArmyInitEasy(player, e_buildType_Core);
  }

  AISetUserInt(player, c_ldNextArmyRoll, armyRoll);
  return duration;
}

//--------------------------------------------------------------------------------------------------
//  KeironFinalArmyInitEasy
//--------------------------------------------------------------------------------------------------
int KeironFinalArmyInitEasy (int player, int buildType) {
  int armyRoll = 0;
  int duration = 0;

  if (buildType == e_buildType_Core) {
      // next attack should be around 27 foodCost and 1600 resCost after about 290 seconds
      armyRoll = RandomInt(1,4);
      if (armyRoll <= 3) {
          AIAddToStockArmy(player, c_KU_Volt, 8);
          AIAddToStockArmy(player, c_KU_Pulsar, 2);
          AIAddToStockArmyPickFrom2Count(player, c_KU_Cataract, 2, c_KU_Pariah, 6);
          // validation: 15 units above with average cost 18 food and 1037 resources
          duration = 334 + RandomInt(-11, 16);
      }
      else if (armyRoll <= 4) {
          AIAddToStockArmy(player, c_KU_Volt, 5);
          AIAddToStockArmy(player, c_KU_Pulsar, 1);
          AIAddToStockArmy(player, c_KU_Umbra, 2);
          // validation: 9 units above with average cost 14 food and 975 resources
          duration = 305 + RandomInt(-10, 15);
      }
  }
  else if (buildType == e_buildType_HighTech) {
      // next attack should be around 16 foodCost and 960 resCost after about 320 seconds
      armyRoll = RandomInt(1,4);
      if (armyRoll <= 3) {
          AIAddToStockArmy(player, c_KU_Volt, 4);
          AIAddToStockArmy(player, c_KU_Umbra, 2);
          AIAddToStockArmy(player, c_KU_Myriad, 1);
          // validation: 9 units above with average cost 15 food and 1125 resources
          duration = 337 + RandomInt(-11, 16);
      }
      else if (armyRoll <= 4) {
          AIAddToStockArmy(player, c_KU_Umbra, 1);
          AIAddToStockArmy(player, c_KU_Inducer, 1);
          AIAddToStockArmy(player, c_KU_Titan, 1);
          // validation: 3 units above with average cost 12 food and 1050 resources
          duration = 313 + RandomInt(-10, 15);
      }
  }
  else if (buildType == e_buildType_Special) {
      // next attack should be around 17 foodCost and 1020 resCost after about 340 seconds
      armyRoll = RandomInt(1,2);
      if (armyRoll <= 1) {
          AIAddToStockArmy(player, c_KU_Volt, 6);
          AIAddToStockArmy(player, c_TU_Marauder, 1);
          AIAddToStockArmy(player, c_TU_Ghost, 2);
          AIAddToStockArmyPickFrom2Count(player, c_TU_Ghost, 1, c_TU_Reaper, 2);
          // validation: 11 units above with average cost 14 food and 1275 resources
          duration = 360 + RandomInt(-12, 18);
      }
      else if (armyRoll <= 2) {
          AIAddToStockArmy(player, c_KU_Volt, 6);
          AIAddToStockArmy(player, c_TU_SiegeTank, 1);
          AIAddToStockArmyPickFrom2Count(player, c_TU_WidowMine, 2, c_TU_Cyclone, 1);
          AIAddToStockArmy(player, c_KU_Paradox, 1);
          // validation: 10 units above with average cost 15 food and 1125 resources
          duration = 344 + RandomInt(-11, 17);
      }
  }
  else if (buildType == e_buildType_Mixed) {
      // next attack should be around 18 foodCost and 1080 resCost after about 360 seconds
      armyRoll = RandomInt(1,5);
      if (armyRoll <= 2) {
          AIAddToStockArmy(player, c_KU_Volt, 8);
          AIAddToStockArmy(player, c_KU_Pulsar, 4);
          AIAddToStockArmyPickFrom2Count(player, c_KU_Meridian, 1, c_KU_Pariah, 3);
          // validation: 14 units above with average cost 18 food and 1150 resources
          duration = 369 + RandomInt(-12, 18);
      }
      else if (armyRoll <= 4) {
          AIAddToStockArmy(player, c_KU_Volt, 4);
          AIAddToStockArmy(player, c_KU_Pulsar, 2);
          AIAddToStockArmy(player, c_KU_Pariah, 4);
          AIAddToStockArmy(player, c_KU_Umbra, 2);
          // validation: 10 units above with average cost 18 food and 1200 resources
          duration = 376 + RandomInt(-12, 18);
      }
      else if (armyRoll <= 5) {
          AIAddToStockArmy(player, c_KU_Volt, 2);
          AIAddToStockArmy(player, c_KU_Pulsar, 1);
          AIAddToStockArmy(player, AIPickFrom2(c_KU_Paragon, c_KU_Titan), 1);
          AIAddToStockArmy(player, AIPickFrom2(c_KU_Paragon, c_KU_Titan), 1);
          // validation: 5 units above with average cost 16 food and 1425 resources
          duration = 397 + RandomInt(-13, 19);
      }
  }
  else if (buildType == e_buildType_Air) {
      // next attack should be around 12 foodCost and 1200 resCost after about 320 seconds
      armyRoll = RandomInt(1,2);
      if (armyRoll <= 1) {
          AIAddToStockArmy(player, c_KU_Echo, 2);
          AIAddToStockArmy(player, c_KU_Aurora, 1);
          AIAddToStockArmy(player, AIPickFrom2(c_KU_Harbinger, c_KU_Aurora), 1);
          AIAddToStockArmy(player, AIPickFrom2(c_KU_Harbinger, c_KU_Aurora), 1);
          // validation: 5 units above with average cost 12 food and 1175 resources
          duration = 318 + RandomInt(-10, 15);
      }
      else if (armyRoll <= 2) {
          AIAddToStockArmy(player, c_KU_Echo, 1);
          AIAddToStockArmy(player, c_KU_Aurora, 1);
          AIAddToStockArmy(player, c_KU_Paragon, 1);
          // validation: 3 units above with average cost 11 food and 1175 resources
          duration = 311 + RandomInt(-10, 15);
      }
  }
  else {
      return KeironFinalArmyInitEasy(player, e_buildType_Core);
  }

  AISetUserInt(player, c_ldNextArmyRoll, armyRoll);
  return duration;
}

//--------------------------------------------------------------------------------------------------
//  KeironLateInitEasy
//--------------------------------------------------------------------------------------------------
void KeironLateInitEasy (int player) {
  int lateLoop = AIGetUserInt(player, c_ldNumLateLoops);
  int curPhase = c_ldPhaseLate;
  int buildType = 0;

  AIChooseNextLateGameBuild(player);
  buildType = AIGetUserInt(player, c_lateGameBuildType);

  if (lateLoop <= 0) { // First Late Loop
      AISetupNextArmy (player, buildType, curPhase, KeironLateArmyInitEasy);
  } else {
      curPhase = c_ldPhaseFinal + lateLoop;
      AISetupNextArmy (player, buildType, curPhase, KeironFinalArmyInitEasy);
  }

  AISetFlag(player, e_flagsScouting, true);
  AISetFlag(player, e_flagsClearObs, true);
  AISetFlag(player, e_flagsLateScout, true);
  AISetFlag(player, e_flagsDetect, true);

  AISetMainState(player, e_mainState_Late, e_mainSubState_Build);
}

//--------------------------------------------------------------------------------------------------
//  KeironLateBuildEasy
//--------------------------------------------------------------------------------------------------
void KeironLateBuildEasy (int player) {
  int lateLoop = AIGetUserInt(player, c_ldNumLateLoops);
  int buildType = AIGetUserInt(player, c_lateGameBuildType);
  int armyRoll = AIGetUserInt(player, c_ldNextArmyRoll);
  int timeOut = AIGetUserInt(player, c_nextArmyTime);
  bool nextState = false;

  if (AIHasPlayerChangedCurrentLateGame(player)) {
      AISetMainState(player, e_mainState_Late, e_mainSubState_Init);
      return;
  }

  AIClearStock(player);

  KeironBasicEconomy(player, c_ldPhaseLate, 16);
  if (buildType == e_buildType_Air) {
      AISetStock( player, 1, c_KU_Aperture );
  }
  KeironBasicExpansion(player, c_ldPhaseLate, 7000, 1500);

  KeironBasicDefenseStock(player);

  AISetStockArmyScale(player, 0.35);

  KeironGeneralBuild(player, c_ldPhaseLate);

  AILDStockWorkers( player, 22, c_KU_Converter);

  if (buildType == e_buildType_Core) {
      if (KeironMacroExpand(player)) { return; }
      AISetStock( player, 3, c_KB_Edifice );
      AISetStock( player, 1, c_KB_Sanctum );
      AISetStock( player, 1, c_KB_Foundry );
      AISetStock( player, 1, c_KB_Atrium );
      AISetStock( player, 1, c_KB_Conduit );
      AISetStock( player, 1, c_KB_Outlet );
      AISetStock( player, 1, c_KB_Empyrean );
  }
  else if (buildType == e_buildType_HighTech) {
      if (KeironMacroExpand(player)) { return; }
      AISetStock( player, 3, c_KB_Edifice );
      AISetStock( player, 1, c_KB_Sanctum );
      AISetStock( player, 1, c_KB_Foundry );
      AISetStock( player, 1, c_KB_Atrium );
      AISetStock( player, 1, c_KB_Conduit );
      AISetStock( player, 1, c_KB_Outlet );
      AISetStock( player, 1, c_KB_Empyrean );
  }
  else if (buildType == e_buildType_Special) {
      if (KeironMacroExpand(player)) { return; }
      AISetStock( player, 3, c_KB_Edifice );
      AISetStock( player, 1, c_KB_Sanctum );
      AISetStock( player, 1, c_KB_Foundry );
      AISetStock( player, 1, c_KB_Atrium );
      AISetStock( player, 1, c_KB_Conduit );
      AISetStock( player, 1, c_KB_Outlet );
      AISetStock( player, 1, c_KB_Empyrean );
  }
  else if (buildType == e_buildType_Mixed) {
      if (KeironMacroExpand(player)) { return; }
      AISetStock( player, 3, c_KB_Edifice );
      AISetStock( player, 1, c_KB_Sanctum );
      AISetStock( player, 1, c_KB_Foundry );
      AISetStock( player, 1, c_KB_Atrium );
      AISetStock( player, 1, c_KB_Conduit );
      AISetStock( player, 1, c_KB_Outlet );
      AISetStock( player, 1, c_KB_Empyrean );
  }
  else if (buildType == e_buildType_Air) {
      if (KeironMacroExpand(player)) { return; }
      AISetStock( player, 3, c_KB_Edifice );
      AISetStock( player, 1, c_KB_Sanctum );
      AISetStock( player, 2, c_KB_Conduit );
      AISetStock( player, 2, c_KB_Outlet );
      AISetStock( player, 2, c_KB_Empyrean );
  }

  AISetStock( player, 2, c_KU_Paradox );
  AISetStock( player, 1, c_KB_CitadelCharged );

  AISetStockArmyScale(player, 0.70);

  AISetStock( player, 2, c_KU_Aperture );
  AISetStock( player, 3, c_KU_Paradox );

  AISetStockArmyScale(player, 1.00);

  AILDStockWorkers( player, 50, c_KU_Converter);

  if (lateLoop <= 0) { // First Late Loop
      KeironUpgradesEasy(player, c_ldPhaseLate);
      KeironTechUp(player, c_ldPhaseLate);
  } else { // Remaining Loops
      KeironUpgradesEasy(player, c_ldPhaseFinal);
      KeironTechUp(player, c_ldPhaseFinal);
  }

  AIEnableStock(player);

  AILDGeneralSharedLogic(player);

  nextState = AITestTimeout(player, timeOut, e_mainState_Late, e_mainSubState_Init);
  if (nextState) {
      lateLoop += 1;
      AISetUserInt(player, c_ldNumLateLoops, lateLoop);
  }
}

//--------------------------------------------------------------------------------------------------
//  KeironOpenEasy
//--------------------------------------------------------------------------------------------------
void KeironOpenEasy (int player) {
  int mainSubState = AIState(player, e_mainSubState);

  if (mainSubState != e_mainSubState_Build) {
      KeironOpenInitEasy(player);
      mainSubState = AIState(player, e_mainSubState);
  }

  if (mainSubState == e_mainSubState_Build) { KeironOpenBuildEasy(player); }
  else { ErrorMeleeScript(player, "Invalid Open MainSubState KeironEasy"); }
}

//--------------------------------------------------------------------------------------------------
//  KeironMidEasy
//--------------------------------------------------------------------------------------------------
void KeironMidEasy (int player) {
  int mainSubState = AIState(player, e_mainSubState);

  if (mainSubState != e_mainSubState_Build) {
      KeironMidInitEasy(player);
      mainSubState = AIState(player, e_mainSubState);
  }

  if (mainSubState == e_mainSubState_Build) { KeironMidBuildEasy(player);  }
  else { ErrorMeleeScript(player, "Invalid Mid MainSubState KeironEasy"); }
}

//--------------------------------------------------------------------------------------------------
//  KeironLateEasy
//--------------------------------------------------------------------------------------------------
void KeironLateEasy (int player) {
  int mainSubState = AIState(player, e_mainSubState);

  if (mainSubState != e_mainSubState_Build) {
      KeironLateInitEasy(player);
      mainSubState = AIState(player, e_mainSubState);
  }

  if (mainSubState == e_mainSubState_Build) { KeironLateBuildEasy(player);  }
  else { ErrorMeleeScript(player, "Invalid Late MainSubState KeironEasy"); }
}

