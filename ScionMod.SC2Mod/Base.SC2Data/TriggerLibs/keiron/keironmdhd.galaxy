//==================================================================================================
//  Keiron MediumHard Skirmish AI
//==================================================================================================

//--------------------------------------------------------------------------------------------------
//  KeironUpgradesMdhd
//--------------------------------------------------------------------------------------------------
void KeironUpgradesMdhd (int player, int phase) {
  int buildType;

  if (phase < c_ldPhaseLate) {
      buildType = AIGetUserInt(player, c_openingBuildType);
  } else {
      buildType = AIGetUserInt(player, c_lateGameBuildType);
  }

  if (buildType != e_buildType_Air) {


      if (phase >= c_ldPhaseMid) {

          AISetStock( player, 1, c_KR_ModifiedGait );
          if (AITechCount(player, c_KU_Cataract, c_techCountInProgressOrBetter) > 2) {
              AISetStock( player, 1 , c_KR_AmplifiedSphere );
          }
          AISetStock( player, 1, c_KR_BioWeapons1 );
          AISetStock( player, 1, c_KR_BioArmor1 );

          if (phase >= c_ldPhaseLate) {

              AISetStock( player, 1, c_KR_ExaltedShield );
              AISetStock( player, 1, c_KR_LatentCharge );
              if (AITechCount(player, c_KU_Pulsar, c_techCountInProgressOrBetter) > 4) {
                  AISetStock( player, 1, c_KR_Dampener);
              }
              if (AITechCount(player, c_KU_Umbra, c_techCountInProgressOrBetter) > 3) {
                  AISetStock( player, 1, c_KR_ShieldCompulsion);
              }
              AISetStock( player, 1, c_KR_BioWeapons2 );
              AISetStock( player, 1, c_KR_BioArmor2 );
              AISetStock( player, 1, c_KR_MechWeapons1 );
              AISetStock( player, 1, c_KR_MechArmor1 );
              AISetStock( player, 1, c_KR_Shields1 );

              if (phase >= c_ldPhaseFinal) {

                  AISetStock( player, 1, c_KR_BioWeapons3 );
                  AISetStock( player, 1, c_KR_BioArmor3 );
                  AISetStock( player, 1, c_KR_MechWeapons3 );
                  AISetStock( player, 1, c_KR_MechArmor3 );
                  AISetStock( player, 1, c_KR_Shields3 );

              }
          }
      }
  }
  else {  // (buildType == e_buildType_Air) 


      if (phase >= c_ldPhaseMid) {

          AISetStock( player, 1, c_KR_BioWeapons1);
          AISetStock( player, 1, c_KR_BioArmor1);

          if (phase >= c_ldPhaseLate) {

              if (AITechCount(player, c_KU_Volt, c_techCountInProgressOrBetter) >= 6) {
                AISetStock( player, 1, c_KR_ModifiedGait );
                AISetStock( player, 1, c_KR_ExaltedShield );
              }
              if (AITechCount(player, c_KU_Volt, c_techCountInProgressOrBetter) >= 6) {
                  AISetStock( player, 1, c_KR_ModifiedGait );
                  AISetStock( player, 1, c_KR_ExaltedShield );
              }
              AISetStock( player, 1, c_KR_MechWeapons1);
              AISetStock( player, 1, c_KR_MechArmor1);
              AISetStock( player, 1, c_KR_Shields1);

              if (phase >= c_ldPhaseFinal) {

                  AISetStock( player, 1, c_KR_BioWeapons3);
                  AISetStock( player, 1, c_KR_BioArmor3);
                  AISetStock( player, 1, c_KR_MechWeapons3);
                  AISetStock( player, 1, c_KR_MechArmor3);
                  AISetStock( player, 1, c_KR_Shields3);

              }
          }
      }
  }
}

//--------------------------------------------------------------------------------------------------
//  KeironOpenArmyInitMdhd
//--------------------------------------------------------------------------------------------------
int KeironOpenArmyInitMdhd (int player, int buildType) {
  int armyRoll = 0;
  int duration = 0;

  if (buildType == e_buildType_Rush) {
      // next attack should be around 8 foodCost and 440 resCost after about 356 seconds
      armyRoll = RandomInt(1, 2);
      if (armyRoll <= 1) {
          AIAddToStockArmy(player, c_KB_Edifice, 2);
          AIAddToStockArmy(player, c_KU_Volt, 6);
          AIAddToStockArmy(player, c_KU_Pariah, 6);
          // validation: above with average cost 9 food and 600 resources
          duration = 350 + RandomInt(-15, 15);
      }
      else if (armyRoll <= 2) {
        AIAddToStockArmy(player, c_KB_Sanctum, 1);
        AIAddToStockArmy(player, c_KU_Volt, 3);
        AIAddToStockArmy(player, c_KU_Pariah, 5);
        AIAddToStockArmy(player, c_KU_Cataract, 1);
        // validation: above with average cost 10 food and 575 resources
        duration = 340 + RandomInt(-15, 15);
    }
  }
  else if (buildType == e_buildType_Timing) {
      // next attack should be around 11 foodCost and 660 resCost after about 412 seconds
      armyRoll = RandomInt(1, 2);
      if (armyRoll <= 1) {
          AIAddToStockArmy(player, c_KU_Volt, 5);
          AIAddToStockArmy(player, c_KU_Pariah, 5);
          AIAddToStockArmy(player, c_KU_Cataract, 2);
          // validation: 9 units above with average cost 15 food and 875 resources
          duration = 400 + RandomInt(-20, 20);
      }
      else if (armyRoll <= 2) {
          AIAddToStockArmy(player, c_KU_Volt, 8);
          AIAddToStockArmy(player, c_KU_Pariah, 6);
          AIAddToStockArmy(player, AIPickFrom2(c_KU_Volt, c_KU_Pariah), 5);
          // validation: units above with average cost 17 food and 950 resources
          duration = 420 + RandomInt(-20, 20);
      }
  }
  else if (buildType == e_buildType_Power) {
      // next attack should be around 15 foodCost and 900 resCost after about 525 seconds
      armyRoll = RandomInt(1, 2);
      if (armyRoll <= 1) {
          AIAddToStockArmy(player, c_KU_Volt, 12);
          AIAddToStockArmy(player, c_KU_Pulsar, 12);
          // validation: 8 units above with average cost 16 food and 1200 resources
          duration = 520 + RandomInt(-20, 20);
      }
      else if (armyRoll <= 2) {
          AIAddToStockArmy(player, c_KU_Volt, 4);
          AIAddToStockArmy(player, c_KU_Cataract, 3);
          AIAddToStockArmy(player, c_KU_Pulsar, 3);
          // validation: 9 units above with average cost 19 food and 1375 resources
          duration = 540 + RandomInt(-20, 20);
      }
  }
  else if (buildType == e_buildType_Macro) {
      // next attack should be around 8 foodCost and 480 resCost after about 225 seconds
      armyRoll = RandomInt(1, 2);
      if (armyRoll <= 1) {
          AIAddToStockArmy(player, c_KU_Pariah, 5);
          AIAddToStockArmy(player, c_KU_Cataract, 2);
          // validation: 2 units above with average cost 9 food and 650 resources
          duration = 230 + RandomInt(-10, 10);
      }
      if (armyRoll <= 2) {
        AIAddToStockArmy(player, c_KU_Volt, 9);
        AIAddToStockArmy(player, c_KU_Pulsar, 1);
        // validation: 2 units above with average cost 11 food and 650 resources
        duration = 220 + RandomInt(-10, 10);
    }
  }
  else if (buildType == e_buildType_Air) {
      // next attack should be around 9 foodCost and 900 resCost after about 543 seconds
      AIAddToStockArmy(player, c_KU_Echo, 2);
      AIAddToStockArmy(player, c_KU_Aurora, 3);
      // validation: 4 units above with average cost 8 food and 1250 resources
      duration = 560 + RandomInt(-25, 25);
  }
  else {
      return KeironOpenArmyInitMdhd(player, e_buildType_Macro);
  }

  AISetUserInt(player, c_ldNextArmyRoll, armyRoll);
  return duration;
}

//--------------------------------------------------------------------------------------------------
//  KeironOpenInitMdhd
//--------------------------------------------------------------------------------------------------
void KeironOpenInitMdhd (int player) {
  int buildType = 0;

  AIChooseNextOpeningBuild(player);
  buildType = AIGetUserInt(player, c_openingBuildType);
  AISetupNextArmy (player, buildType, c_ldPhaseOpen, KeironOpenArmyInitMdhd);

  AISetMainState(player, e_mainState_Open, e_mainSubState_Build);
}

//--------------------------------------------------------------------------------------------------
//  KeironOpenBuildMdhd
//--------------------------------------------------------------------------------------------------
void KeironOpenBuildMdhd (int player) {
  int buildType = AIGetUserInt(player, c_openingBuildType);
  int armyRoll = AIGetUserInt(player, c_ldNextArmyRoll);
  int timeOut = AIGetUserInt(player, c_nextArmyTime);
  bool nextState = false;

  if (AIHasPlayerChangedCurrentOpening(player)) {
      AISetMainState(player, e_mainState_Open, e_mainSubState_Init);
      return;
  }

  AIClearStock(player);

  if (buildType == e_buildType_Rush) {
      AISetStock( player, 1, c_KB_Citadel_Alias );
      AISetStock( player, 16, c_KU_Converter );
      AISetStock( player, 1, c_KB_Edifice );
      AISetStock( player, 17, c_KU_Converter );
      AISetStock( player, 1, c_KB_Formulator );
      AISetStock( player, 19, c_KU_Converter );
      AISetStock( player, 1, c_KU_Volt );
      AISetStock( player, 1, c_KB_CitadelCharged );
      AISetStock( player, 1, c_KB_Reliquary );
      AISetStockUnitNext( player, 20, c_KU_Converter, c_stockIdle );
      AISetStockFarms( player, c_KB_Edifice, c_stockNormalFarms);
  }
  else if (buildType == e_buildType_Timing) {
      AISetStock( player, 1, c_KB_Citadel_Alias );
      AISetStock( player, 16, c_KU_Converter );
      AISetStock( player, 1, c_KB_Edifice );
      AISetStock( player, 17, c_KU_Converter );
      AISetStock( player, 1, c_KB_Formulator );
      AISetStock( player, 19, c_KU_Converter );
      AISetStock( player, 1, c_KU_Volt );
      AISetStock( player, 1, c_KB_CitadelCharged );
      AISetStock( player, 1, c_KB_Reliquary );
      AISetStockUnitNext( player, 20, c_KU_Converter, c_stockIdle );
      AISetStockFarms( player, c_KB_Edifice, c_stockNormalFarms);
      AISetStock( player, 2, c_KB_Formulator );
  }
  else if (buildType == e_buildType_Power) {
      AISetStock( player, 1, c_KB_Citadel_Alias );
      AISetStock( player, 16, c_KU_Converter );
      AISetStock( player, 1, c_KB_Edifice );
      AISetStock( player, 17, c_KU_Converter );
      AISetStock( player, 1, c_KB_Formulator );
      AISetStock( player, 19, c_KU_Converter );
      AISetStock( player, 1, c_KU_Volt );
      AISetStock( player, 1, c_KB_CitadelCharged );
      AISetStock( player, 1, c_KB_Reliquary );
      AISetStock( player, 1, c_KB_Sanctum );
      AISetStockUnitNext( player, 20, c_KU_Converter, c_stockIdle );
      AISetStockFarms( player, c_KB_Edifice, c_stockNormalFarms);
      AISetStock( player, 2, c_KB_Formulator );
  }
  else if (buildType == e_buildType_Macro) {
      AISetStock( player, 1, c_KB_Citadel_Alias );
      AISetStock( player, 16, c_KU_Converter );
      AISetStock( player, 1, c_KB_Edifice );
      AISetStock( player, 17, c_KU_Converter );
      if (KeironMacroExpand(player)) { return; }
      AISetStock( player, 1, c_KB_Formulator );
      AISetStock( player, 19, c_KU_Converter );
      AISetStock( player, 1, c_KU_Volt );
      AISetStock( player, 1, c_KB_CitadelCharged );
      AISetStock( player, 1, c_KB_Reliquary );
      AISetStock( player, 1, c_KB_Sanctum );
      AISetStockUnitNext( player, 26, c_KU_Converter, c_stockIdle );
      AISetStockFarms( player, c_KB_Edifice, c_stockNormalFarms );
      AISetStock( player, 2, c_KB_Formulator );
  }
  else if (buildType == e_buildType_Air) {
      AISetStock( player, 1, c_KB_Citadel_Alias );
      AISetStock( player, 16, c_KU_Converter );
      AISetStock( player, 1, c_KB_Edifice );
      AISetStock( player, 17, c_KU_Converter );
      if (KeironMacroExpand(player)) { return; }
      AISetStock( player, 1, c_KB_Formulator );
      AISetStock( player, 19, c_KU_Converter );
      AISetStock( player, 1, c_KB_Edifice );
      AISetStock( player, 2, c_KB_Formulator );
      AISetStock( player, 1, c_KB_Sanctum );
      AISetStock( player, 1, c_KB_CitadelCharged );
      AISetStockUnitNext( player, 26, c_KU_Converter, c_stockIdle );
      AISetStockFarms( player, c_KB_Edifice, c_stockNormalFarms );
      AISetStock( player, 1, c_KB_Conduit );
      AISetStock( player, 1, c_KB_Outlet );
  }

  KeironBasicDefenseStock(player);

  AISetStockArmyScale(player, 0.35);

  KeironGeneralBuild(player, c_ldPhaseOpen);

  AISetStockArmyScale(player, 0.70);

  KeironUpgradesMdhd(player, c_ldPhaseOpen);

  AISetStockArmyScale(player, 1.00);

  AILDStockWorkers( player, 26, c_KU_Converter);

  KeironTechUp(player, c_ldPhaseOpen);

  if (buildType == e_buildType_Air) {
      AISetStock( player, 1, c_KU_Aperture );
  }

  AIEnableStock(player);

  AILDGeneralSharedLogic(player);

  nextState = AITestTimeout(player, timeOut, e_mainState_Mid, e_mainSubState_Init);
}

//--------------------------------------------------------------------------------------------------
//  KeironMidArmyInitMdhd
//--------------------------------------------------------------------------------------------------
int KeironMidArmyInitMdhd (int player, int buildType) {
  int armyRoll = 0;
  int duration = 0;

  if (buildType == e_buildType_Rush) {
      // next attack should be around 20 foodCost and 1200 resCost after about 300 seconds
      armyRoll = RandomInt(1,2);
      if (armyRoll <= 1) {
          AIAddToStockArmy(player, c_KU_Volt, 7);
          AIAddToStockArmy(player, c_KU_Pulsar, 2);
          AIAddToStockArmy(player, c_KU_Cataract, 2);
          AIAddToStockArmy(player, AIPickFrom2(c_KU_Volt, c_KU_Pariah), 6);
          // validation: 17 units above with average cost 23 food and 1350 resources
          duration = 320 + RandomInt(-15, 15);
      }
      else if (armyRoll <= 2) {
        AIAddToStockArmy(player, c_KU_Volt, 8);
        AIAddToStockArmy(player, c_KU_Pulsar, 2);
        AIAddToStockArmy(player, c_KU_Cataract, 2);
        AIAddToStockArmy(player, c_KU_Umbra, 1);
        // validation: 13 units above with average cost 20 food and 1350 resources
        duration = 320 + RandomInt(-15, 15);
    }
  }
  else if (buildType == e_buildType_Timing) {
      // next attack should be around 25 foodCost and 1500 resCost after about 330 seconds
      armyRoll = RandomInt(1, 2);
      if (armyRoll <= 1) {
          AIAddToStockArmy(player, c_KU_Volt, 6);
          AIAddToStockArmy(player, c_KU_Pulsar, 2);
          AIAddToStockArmy(player, c_KU_Umbra, 1);
          AIAddToStockArmy(player, AIPickFrom2(c_KU_Pulsar, c_KU_Cataract), 1);
          AIAddToStockArmy(player, AIPickFrom2(c_KU_Pulsar, c_KU_Cataract), 1);
          // validation: 11 units above with average cost 16 food and 1550 resources
          duration = 330 + RandomInt(-15, 15);
      }
      else if (armyRoll <= 2) {
          AIAddToStockArmy(player, c_KU_Volt, 2);
          AIAddToStockArmy(player, c_KU_Pulsar, 6);
          AIAddToStockArmy(player, c_KU_Umbra, 2);
          AIAddToStockArmy(player, c_KU_Cataract, 1);
          // validation: 11 units above with average cost 15 food and 1600 resources
          duration = 330 + RandomInt(-15, 15);
      }

  }
  else if (buildType == e_buildType_Power) {
      // next attack should be around 26 foodCost and 1580 resCost after about 350 seconds
      armyRoll = RandomInt(1, 2);
      if (armyRoll <= 1) {
          AIAddToStockArmy(player, c_KU_Volt, 10);
          AIAddToStockArmy(player, c_KU_Pulsar, 6);
          AIAddToStockArmy(player, AIPickFrom2(c_KU_Pulsar, c_KU_Cataract), 2);
          AIAddToStockArmy(player, AIPickFrom2(c_KU_Pulsar, c_KU_Cataract), 2);
          // validation: 20 units above with average cost 26 food and 1600 resources
          duration = 350 + RandomInt(-15, 15);
      }
      else if (armyRoll <= 2) {
          AIAddToStockArmy(player, c_KU_Volt, 6);
          AIAddToStockArmy(player, c_KU_Pulsar, 12);
          AIAddToStockArmy(player, c_KU_Meridian, 2);
          // validation: 18 units above with average cost 22 food and 1550 resources
          duration = 350 + RandomInt(-15, 15);
      }
  }
  else if (buildType == e_buildType_Macro) {
      // next attack should be around 36 foodCost and 2200 resCost after about 525 seconds
      // note: mid macro build did not send opening attack at 225 time
      armyRoll = RandomInt(1, 3);
      if (armyRoll <= 1) {
          AIAddToStockArmy(player, c_KU_Volt, 12);
          AIAddToStockArmy(player, c_KU_Pulsar, 4);
          AIAddToStockArmy(player, c_KU_Umbra, 2);
          AIAddToStockArmyPickFrom2Count(player, c_KU_Cataract, 1, c_KU_Pariah, 4);
          AIAddToStockArmyPickFrom2Count(player, c_KU_Cataract, 1, c_KU_Pariah, 4);
          // validation: 23 units above with average cost 34 food and 2300 resources
          duration = 530 + RandomInt(-25, 25);
      }
      if (armyRoll <= 2) {
          AIAddToStockArmy(player, c_KU_Volt, 12);
          AIAddToStockArmy(player, c_KU_Pulsar, 2);
          AIAddToStockArmy(player, c_KU_Umbra, 4);
          AIAddToStockArmyPickFrom2Count(player, c_KU_Cataract, 1, c_KU_Pariah, 4);
          AIAddToStockArmyPickFrom2Count(player, c_KU_Cataract, 1, c_KU_Pariah, 4);
          // validation: 17 units above with average cost 26 food and 2400 resources
          duration = 540 + RandomInt(-25, 25);
      }
      if (armyRoll <= 3) {
          AIAddToStockArmy(player, c_KU_Volt, 11);
          AIAddToStockArmy(player, c_KU_Pulsar, 3);
          AIAddToStockArmy(player, c_KU_Umbra, 3);
          AIAddToStockArmy(player, c_KU_Myriad, 1);
          AIAddToStockArmyPickFrom2Count(player, c_KU_Cataract, 2, c_KU_Pariah, 8);
          // validation: 19 units above with average cost 36 food and 2725 resources
          duration = 585 + RandomInt(-25, 25);
      }
  }
  else if (buildType == e_buildType_Air) {
      // next attack should be around 18 foodCost and 1800 resCost after about 330 seconds
      armyRoll = RandomInt(1, 2);
      if (armyRoll <= 1) {
          AIAddToStockArmy(player, c_KU_Echo, 3);
          AIAddToStockArmy(player, c_KU_Aurora, 5);
          // validation: 8 units above with average cost 19 food and 1775 resources
          duration = 330 + RandomInt(-15, 15);
      }
      else if (armyRoll <= 2) {
          AIAddToStockArmy(player, c_KU_Echo, 2);
          AIAddToStockArmy(player, c_KU_Aurora, 2);
          AIAddToStockArmy(player, c_KU_Harbinger, 2);
          // validation: 6 units above with average cost 18 food and 1750 resources
          duration = 330 + RandomInt(-15, 15);
      }
  }
  else {
      return KeironMidArmyInitMdhd(player, e_buildType_Macro);
  }

  AISetUserInt(player, c_ldNextArmyRoll, armyRoll);
  return duration;
}

//--------------------------------------------------------------------------------------------------
//  KeironMidInitMdhd
//--------------------------------------------------------------------------------------------------
void KeironMidInitMdhd (int player) {
  int buildType = 0;

  AIChooseNextOpeningBuild(player);
  buildType = AIGetUserInt(player, c_openingBuildType);
  AISetupNextArmy (player, buildType, c_ldPhaseMid, KeironMidArmyInitMdhd);

  AISetFlag(player, e_flagsScouting, true);
  AISetFlag(player, e_flagsLateScout, true);
  AISetFlag(player, e_flagsDetect, true);

  AISetMainState(player, e_mainState_Mid, e_mainSubState_Build);
}

//--------------------------------------------------------------------------------------------------
//  KeironMidBuildMdhd
//--------------------------------------------------------------------------------------------------
void KeironMidBuildMdhd (int player) {
  int buildType = AIGetUserInt(player, c_openingBuildType);
  int armyRoll = AIGetUserInt(player, c_ldNextArmyRoll);
  int timeOut = AIGetUserInt(player, c_nextArmyTime);
  bool nextState = false;

  if (AIHasPlayerChangedCurrentOpening(player)) {
      AISetMainState(player, e_mainState_Mid, e_mainSubState_Init);
      return;
  }

  AIClearStock(player);

  KeironBasicEconomy(player, c_ldPhaseMid, 20);
  if (buildType == e_buildType_Air) {
      AISetStock( player, 1, c_KU_Aperture );
  }
  KeironBasicExpansion(player, c_ldPhaseMid, 5500, 1500);

  KeironBasicDefenseStock(player);

  AISetStockArmyScale(player, 0.35);

  KeironGeneralBuild(player, c_ldPhaseMid);

  AILDStockWorkers( player, 26, c_KU_Converter);

  if (buildType == e_buildType_Rush) {
      AISetStock( player, 3, c_KB_Citadel );
      AISetStock( player, 1, c_KB_Sanctum );
  }
  else if (buildType == e_buildType_Timing) {
      AISetStock( player, 1, c_KB_Sanctum );
      AISetStockUnitNext( player, 3, c_KB_Edifice, c_stockIdle );
      AISetStockUnitNext( player, 1, c_KB_Foundry, c_stockIdle );
  }
  else if (buildType == e_buildType_Power) {
      if (KeironMacroExpand(player)) { return; }
      AISetStock( player, 1, c_KB_Foundry );
      AISetStockUnitNext( player, 3, c_KB_Edifice, c_stockIdle );
  }
  else if (buildType == e_buildType_Macro) {
      if (KeironMacroExpand(player)) { return; }
      AISetStock( player, 1, c_KB_Foundry );
      AISetStockUnitNext( player, 3, c_KB_Edifice, c_stockIdle );
  }
  else if (buildType == e_buildType_Air) {
      if (KeironMacroExpand(player)) { return; }
      AISetStock( player, 2, c_KB_Conduit );
      AISetStock( player, 2, c_KB_Outlet );
      AISetStock( player, 2, c_KB_Empyrean );
  }

  if (AINeedsDetection(player)) {
      AISetStock( player, 1, c_KU_Paradox );
  }

  AISetStockArmyScale(player, 0.70);

  AILDStockWorkers( player, 60, c_KU_Converter);

  KeironUpgradesMdhd(player, c_ldPhaseMid);

  AISetStockArmyScale(player, 1.00);

  AISetStock( player, 2, c_KU_Paradox );
  AISetStock( player, 2, c_KB_CitadelCharged );

  KeironTechUp(player, c_ldPhaseMid);

  AIEnableStock(player);

  AILDGeneralSharedLogic(player);

  nextState = AITestTimeout(player, timeOut, e_mainState_Late, e_mainSubState_Init);
}

//--------------------------------------------------------------------------------------------------
//  KeironLateArmyInitMdhd
//--------------------------------------------------------------------------------------------------
int KeironLateArmyInitMdhd (int player, int buildType) {
  int armyRoll = 0;
  int duration = 0;

  if (buildType == e_buildType_Core) {
      // next attack should be around 36 foodCost and 2200 resCost after about 280 seconds
      armyRoll = RandomInt(1, 3);
      if (armyRoll <= 1) {
          AIAddToStockArmy(player, c_KU_Pariah, 16);
          AIAddToStockArmy(player, c_KU_Pulsar, 3);
          AIAddToStockArmyPickFrom2Count(player, c_KU_Cataract, 1, c_KU_Volt, 4);
          AIAddToStockArmyPickFrom2Count(player, c_KU_Cataract, 1, c_KU_Volt, 4);
          AIAddToStockArmyPickFrom2Count(player, c_KU_Cataract, 1, c_KU_Volt, 4);
          AIAddToStockArmyPickFrom2Count(player, c_KU_Cataract, 1, c_KU_Volt, 4);
          // validation: 29 units above with average cost 37 food and 2200 resources
          duration = 280 + RandomInt(-15, 15);
      }
      else if (armyRoll <= 2) {
          AIAddToStockArmy(player, c_KU_Pariah, 16);
          AIAddToStockArmy(player, c_KU_Volt, 2);
          AIAddToStockArmy(player, c_KU_Aurora, 2);
          AIAddToStockArmyPickFrom2Count(player, c_KU_Cataract, 1, c_KU_Volt, 4);
          AIAddToStockArmyPickFrom2Count(player, c_KU_Cataract, 1, c_KU_Volt, 4);
          AIAddToStockArmyPickFrom2Count(player, c_KU_Cataract, 1, c_KU_Volt, 4);
          AIAddToStockArmyPickFrom2Count(player, c_KU_Cataract, 1, c_KU_Volt, 4);
          // validation: 30 units above with average cost 36 food and 2250 resources
          duration = 290 + RandomInt(-15, 15);
      }
      else if (armyRoll <= 3) {
          AIAddToStockArmy(player, c_KU_Pariah, 8);
          AIAddToStockArmy(player, c_KU_Aurora, 2);
          AIAddToStockArmy(player, c_KU_Umbra, 2);
          AIAddToStockArmyPickFrom2Count(player, c_KU_Cataract, 1, c_KU_Volt, 4);
          AIAddToStockArmyPickFrom2Count(player, c_KU_Cataract, 1, c_KU_Volt, 4);
          AIAddToStockArmyPickFrom2Count(player, c_KU_Cataract, 1, c_KU_Volt, 4);
          AIAddToStockArmyPickFrom2Count(player, c_KU_Cataract, 1, c_KU_Volt, 4);
          // validation: 22 units above with average cost 30 food and 2250 resources
          duration = 300 + RandomInt(-15, 15);
    }
  }
  else if (buildType == e_buildType_HighTech) {
      // next attack should be around 39 foodCost and 2400 resCost after about 300 seconds
      armyRoll = RandomInt(1, 3);
      if (armyRoll <= 1) {
          AIAddToStockArmy(player, c_KU_Volt, 8);
          AIAddToStockArmy(player, c_KU_Umbra, 4);
          AIAddToStockArmy(player, c_KU_Inducer, 3);
          // validation: 17 units above with average cost 34 food and 2850 resources
          duration = 310 + RandomInt(-15, 15);
      }
      else if (armyRoll <= 2) {
          AIAddToStockArmy(player, c_KU_Cataract, 4);
          AIAddToStockArmy(player, c_KU_Umbra, 2);
          AIAddToStockArmy(player, c_KU_Inducer, 2);
          AIAddToStockArmy(player, c_KU_Myriad, 2);
          // validation: 10 units above with average cost 36 food and 3050 resources
          duration = 320 + RandomInt(-15, 15);
      }
      else if (armyRoll <= 3) {
          AIAddToStockArmy(player, c_KU_Cataract, 5);
          AIAddToStockArmy(player, c_KU_Umbra, 2);
          AIAddToStockArmy(player, c_KU_Inducer, 1);
          AIAddToStockArmy(player, c_KU_Titan, 2);
          // validation: 9 units above with average cost 32 food and 3050 resources
          duration = 330 + RandomInt(-15, 15);
    }
  }
  else if (buildType == e_buildType_Special) {
      // next attack should be around 41 foodCost and 2600 resCost after about 320 seconds
      armyRoll = RandomInt(1,2);
      if (armyRoll <= 1) {
          AIAddToStockArmy(player, c_KU_Volt, 12);
          AIAddToStockArmy(player, c_KU_Pulsar, 4);
          AIAddToStockArmy(player, c_KU_Meridian, 4);
          AIAddToStockArmy(player, c_KU_Umbra, 2);
          // validation: 22 units above with average cost 34 food and 2925 resources
          duration = 340 + RandomInt(-15, 15);
      }
      else if (armyRoll <= 2) {
          AIAddToStockArmy(player, c_KU_Volt, 8);
          AIAddToStockArmy(player, c_KU_Umbra, 4);
          AIAddToStockArmy(player, c_KU_Meridian, 4);
          AIAddToStockArmy(player, c_KU_Titan, 1);
          // validation: 17 units above with average cost 34 food and 3050 resources
          duration = 350 + RandomInt(-15, 15);
      }
  }
  else if (buildType == e_buildType_Mixed) {
      // next attack should be around 44 foodCost and 3200 resCost after about 360 seconds
      armyRoll = RandomInt(1, 3);
      if (armyRoll <= 1) {
          AIAddToStockArmy(player, c_KU_Volt, 12);
          AIAddToStockArmy(player, c_KU_Pulsar, 3);
          AIAddToStockArmy(player, c_KU_Cataract, 2);
          AIAddToStockArmy(player, c_KU_Harbinger, 2);
          AIAddToStockArmyPickFrom2Count(player, c_KU_Meridian, 1, c_KU_Pariah, 6);
          AIAddToStockArmyPickFrom2Count(player, c_KU_Meridian, 1, c_KU_Pariah, 6);
          AIAddToStockArmyPickFrom2Count(player, c_KU_Meridian, 1, c_KU_Pariah, 6);
          // validation: 31 units above with average cost 34 food and 3275 resources
          duration = 350 + RandomInt(-15, 15);
      }
      else if (armyRoll <= 2) {
          AIAddToStockArmy(player, c_KU_Volt, 8);
          AIAddToStockArmy(player, c_KU_Cataract, 3);
          AIAddToStockArmy(player, c_KU_Pariah, 8);
          AIAddToStockArmy(player, c_KU_Umbra, 2);
          AIAddToStockArmy(player, c_KU_Aurora, 2);
          AIAddToStockArmy(player, c_KU_Harbinger, 2);
          // validation: 25 units above with average cost 38 food and 3350 resources
          duration = 365 + RandomInt(-15, 15);
      }
      else if (armyRoll <= 3) {
          AIAddToStockArmy(player, c_KU_Volt, 12);
          AIAddToStockArmy(player, c_KU_Cataract, 4);
          AIAddToStockArmy(player, c_KU_Pulsar, 4);
          AIAddToStockArmy(player, c_KU_Titan, 1);
          AIAddToStockArmy(player, c_KU_Paragon, 1);
          // validation: 21 units above with average cost 36 food and 3550 resources
          duration = 370 + RandomInt(-15, 15);
      }
  }
  else if (buildType == e_buildType_Air) {
      // next attack should be around 28 foodCost and 2800 resCost after about 300 seconds
      armyRoll = RandomInt(1,3);
      if (armyRoll <= 1) {
          AIAddToStockArmy(player, c_KU_Echo, 4);
          AIAddToStockArmy(player, c_KU_Aurora, 4);
          AIAddToStockArmy(player, c_KU_Harbinger, 3);
          // validation: 7 units above with average cost 18 food and 3250 resources
          duration = 300 + RandomInt(-15, 15);
      }
      else if (armyRoll <= 2) {
          AIAddToStockArmy(player, c_KU_Echo, 2);
          AIAddToStockArmy(player, c_KU_Aurora, 2);
          AIAddToStockArmy(player, c_KU_Harbinger, 1);
          AIAddToStockArmy(player, c_KU_Paragon, 2);
          // validation: 2 units above with average cost 8 food and 3000 resources
          duration = 310 + RandomInt(-15, 15);
    }
    else if (armyRoll <= 3) {
        AIAddToStockArmy(player, c_KU_Echo, 2);
        AIAddToStockArmy(player, c_KU_Aurora, 2);
        AIAddToStockArmy(player, c_KU_Paragon, 3);
        // validation: 2 units above with average cost 8 food and 3350 resources
        duration = 330 + RandomInt(-15, 15);
  }
  }
  else {
      return KeironLateArmyInitMdhd(player, e_buildType_Core);
  }

  AISetUserInt(player, c_ldNextArmyRoll, armyRoll);
  return duration;
}

//--------------------------------------------------------------------------------------------------
//  KeironFinalArmyInitMdhd
//--------------------------------------------------------------------------------------------------
int KeironFinalArmyInitMdhd (int player, int buildType) {
  int armyRoll = 0;
  int duration = 0;

  if (buildType == e_buildType_Core) {
      // next attack should be around 49 foodCost and 3200 resCost after about 280 seconds
      armyRoll = RandomInt(1, 3);
      if (armyRoll <= 1) {
          AIAddToStockArmy(player, c_KU_Pariah, 20);
          AIAddToStockArmy(player, c_KU_Pulsar, 6);
          AIAddToStockArmy(player, c_KU_Cataract, 2);
          AIAddToStockArmyPickFrom2Count(player, c_KU_Cataract, 1, c_KU_Volt, 4);
          AIAddToStockArmyPickFrom2Count(player, c_KU_Cataract, 1, c_KU_Volt, 4);
          AIAddToStockArmyPickFrom2Count(player, c_KU_Cataract, 1, c_KU_Volt, 4);
          AIAddToStockArmyPickFrom2Count(player, c_KU_Cataract, 1, c_KU_Volt, 4);
          AIAddToStockArmyPickFrom2Count(player, c_KU_Cataract, 1, c_KU_Volt, 4);
          // validation: 41 units above with average cost 57 food and 3600 resources
          duration = 280 + RandomInt(-15, 15);
      }
      else if (armyRoll <= 2) {
          AIAddToStockArmy(player, c_KU_Pariah, 20);
          AIAddToStockArmy(player, c_KU_Volt, 6);
          AIAddToStockArmy(player, c_KU_Aurora, 4);
          AIAddToStockArmy(player, c_KU_Cataract, 2);
          AIAddToStockArmyPickFrom2Count(player, c_KU_Cataract, 1, c_KU_Volt, 4);
          AIAddToStockArmyPickFrom2Count(player, c_KU_Cataract, 1, c_KU_Volt, 4);
          AIAddToStockArmyPickFrom2Count(player, c_KU_Cataract, 1, c_KU_Volt, 4);
          AIAddToStockArmyPickFrom2Count(player, c_KU_Cataract, 1, c_KU_Volt, 4);
          // validation: 42 units above with average cost 54 food and 3600 resources
          duration = 280 + RandomInt(-15, 15);
      }
      else if (armyRoll <= 3) {
          AIAddToStockArmy(player, c_KU_Pariah, 16);
          AIAddToStockArmy(player, c_KU_Aurora, 4);
          AIAddToStockArmy(player, c_KU_Umbra, 4);
          AIAddToStockArmyPickFrom2Count(player, c_KU_Cataract, 1, c_KU_Volt, 4);
          AIAddToStockArmyPickFrom2Count(player, c_KU_Cataract, 1, c_KU_Volt, 4);
          AIAddToStockArmyPickFrom2Count(player, c_KU_Cataract, 1, c_KU_Volt, 4);
          AIAddToStockArmyPickFrom2Count(player, c_KU_Cataract, 1, c_KU_Volt, 4);
          // validation: 34 units above with average cost 48 food and 3700 resources
          duration = 280 + RandomInt(-15, 15);
    }
  }
  else if (buildType == e_buildType_HighTech) {
      // next attack should be around 52 foodCost and 3500 resCost after about 280 seconds
      armyRoll = RandomInt(1, 3);
      if (armyRoll <= 1) {
          AIAddToStockArmy(player, c_KU_Volt, 8);
          AIAddToStockArmy(player, c_KU_Umbra, 4);
          AIAddToStockArmy(player, c_KU_Inducer, 4);
          AIAddToStockArmy(player, c_KU_Titan, 1);
          // validation: 17 units above with average cost 46 food and 3750 resources
          duration = 280 + RandomInt(-15, 15);
      }
      else if (armyRoll <= 2) {
          AIAddToStockArmy(player, c_KU_Cataract, 4);
          AIAddToStockArmy(player, c_KU_Umbra, 2);
          AIAddToStockArmy(player, c_KU_Inducer, 2);
          AIAddToStockArmy(player, c_KU_Myriad, 4);
          // validation: 12 units above with average cost 48 food and 3900 resources
          duration = 290 + RandomInt(-15, 15);
      }
      else if (armyRoll <= 3) {
          AIAddToStockArmy(player, c_KU_Cataract, 6);
          AIAddToStockArmy(player, c_KU_Umbra, 6);
          AIAddToStockArmy(player, c_KU_Inducer, 1);
          AIAddToStockArmy(player, c_KU_Titan, 2);
          // validation: 15 units above with average cost 36 food and 4250 resources
          duration = 300 + RandomInt(-15, 15);
    }
  }
  else if (buildType == e_buildType_Special) {
      // next attack should be around 56 foodCost and 3800 resCost after about 300 seconds
      armyRoll = RandomInt(1,2);
      if (armyRoll <= 1) {
          AIAddToStockArmy(player, c_KU_Volt, 12);
          AIAddToStockArmy(player, c_KU_Pulsar, 5);
          AIAddToStockArmy(player, c_KU_Meridian, 6);
          AIAddToStockArmy(player, c_KU_Umbra, 4);
          // validation: 27 units above with average cost 53 food and 4275 resources
          duration = 310 + RandomInt(-15, 15);
      }
      else if (armyRoll <= 2) {
          AIAddToStockArmy(player, c_KU_Volt, 12);
          AIAddToStockArmy(player, c_KU_Umbra, 4);
          AIAddToStockArmy(player, c_KU_Meridian, 6);
          AIAddToStockArmy(player, c_KU_Titan, 1);
          // validation: 21 units above with average cost 44 food and 3900 resources
          duration = 300 + RandomInt(-15, 15);
      }
  }
  else if (buildType == e_buildType_Mixed) {
      // next attack should be around 60 foodCost and 4100 resCost after about 340 seconds
      armyRoll = RandomInt(1, 3);
      if (armyRoll <= 1) {
          AIAddToStockArmy(player, c_KU_Volt, 12);
          AIAddToStockArmy(player, c_KU_Pulsar, 6);
          AIAddToStockArmy(player, c_KU_Cataract, 4);
          AIAddToStockArmy(player, c_KU_Harbinger, 2);
          AIAddToStockArmyPickFrom2Count(player, c_KU_Meridian, 1, c_KU_Pariah, 6);
          AIAddToStockArmyPickFrom2Count(player, c_KU_Meridian, 1, c_KU_Pariah, 6);
          AIAddToStockArmyPickFrom2Count(player, c_KU_Meridian, 1, c_KU_Pariah, 6);
          AIAddToStockArmyPickFrom2Count(player, c_KU_Meridian, 1, c_KU_Pariah, 6);
          // validation: 38 units above with average cost 61 food and 3700 resources
          duration = 350 + RandomInt(-15, 15);
      }
      else if (armyRoll <= 2) {
          AIAddToStockArmy(player, c_KU_Volt, 8);
          AIAddToStockArmy(player, c_KU_Cataract, 3);
          AIAddToStockArmy(player, c_KU_Pariah, 8);
          AIAddToStockArmy(player, c_KU_Umbra, 4);
          AIAddToStockArmy(player, c_KU_Aurora, 2);
          AIAddToStockArmy(player, c_KU_Harbinger, 4);
          // validation: 29 units above with average cost 44 food and 4750 resources
          duration = 340 + RandomInt(-15, 15);
      }
      else if (armyRoll <= 3) {
          AIAddToStockArmy(player, c_KU_Volt, 12);
          AIAddToStockArmy(player, c_KU_Cataract, 4);
          AIAddToStockArmy(player, c_KU_Pulsar, 4);
          AIAddToStockArmy(player, c_KU_Meridian, 2);
          AIAddToStockArmy(player, c_KU_Titan, 2);
          AIAddToStockArmy(player, c_KU_Paragon, 1);
          // validation: 25 units above with average cost 58 food and 4750 resources
          duration = 340 + RandomInt(-15, 15);
      }
  }
  else if (buildType == e_buildType_Air) {
      // next attack should be around 38 foodCost and 3800 resCost after about 280 seconds
      armyRoll = RandomInt(1,3);
      if (armyRoll <= 1) {
          AIAddToStockArmy(player, c_KU_Echo, 5);
          AIAddToStockArmy(player, c_KU_Aurora, 4);
          AIAddToStockArmy(player, c_KU_Harbinger, 4);
          // validation: 13 units above with average cost 38 food and 3900 resources
          duration = 280 + RandomInt(-15, 15);
      }
      else if (armyRoll <= 2) {
          AIAddToStockArmy(player, c_KU_Echo, 3);
          AIAddToStockArmy(player, c_KU_Aurora, 3);
          AIAddToStockArmy(player, c_KU_Harbinger, 2);
          AIAddToStockArmy(player, c_KU_Paragon, 2);
          // validation: 2 units above with average cost 42 food and 3925 resources
          duration = 280 + RandomInt(-15, 15);
    }
    else if (armyRoll <= 3) {
        AIAddToStockArmy(player, c_KU_Echo, 2);
        AIAddToStockArmy(player, c_KU_Aurora, 2);
        AIAddToStockArmy(player, c_KU_Paragon, 4);
        // validation: 2 units above with average cost 42 food and 4150 resources
        duration = 290 + RandomInt(-15, 15);
  }
  }
  else {
      return KeironLateArmyInitMdhd(player, e_buildType_Core);
  }

  AISetUserInt(player, c_ldNextArmyRoll, armyRoll);
  return duration;
}

//--------------------------------------------------------------------------------------------------
//  KeironLateInitMdhd
//--------------------------------------------------------------------------------------------------
void KeironLateInitMdhd (int player) {
  int lateLoop = AIGetUserInt(player, c_ldNumLateLoops);
  int curPhase = c_ldPhaseLate;
  int buildType = 0;

  AIChooseNextLateGameBuild(player);
  buildType = AIGetUserInt(player, c_lateGameBuildType);

  if (lateLoop <= 0) { // First Late Loop
      AISetupNextArmy (player, buildType, curPhase, KeironLateArmyInitMdhd);
  } else {
      curPhase = c_ldPhaseFinal + lateLoop;
      AISetupNextArmy (player, buildType, curPhase, KeironFinalArmyInitMdhd);
  }

  AISetFlag(player, e_flagsScouting, true);
  AISetFlag(player, e_flagsClearObs, true);
  AISetFlag(player, e_flagsLateScout, true);
  AISetFlag(player, e_flagsDetect, true);

  AISetMainState(player, e_mainState_Late, e_mainSubState_Build);
}

//--------------------------------------------------------------------------------------------------
//  KeironLateBuildMdhd
//--------------------------------------------------------------------------------------------------
void KeironLateBuildMdhd (int player) {
  int lateLoop = AIGetUserInt(player, c_ldNumLateLoops);
  int buildType = AIGetUserInt(player, c_lateGameBuildType);
  int armyRoll = AIGetUserInt(player, c_ldNextArmyRoll);
  int timeOut = AIGetUserInt(player, c_nextArmyTime);
  bool nextState = false;

  if (AIHasPlayerChangedCurrentLateGame(player)) {
      AISetMainState(player, e_mainState_Late, e_mainSubState_Init);
      return;
  }

  AIClearStock(player);

  KeironBasicEconomy(player, c_ldPhaseLate, 20);
  if (buildType == e_buildType_Air) {
      AISetStock( player, 1, c_KU_Aperture );
  }
  KeironBasicExpansion(player, c_ldPhaseLate, 10000, 3500);

  KeironBasicDefenseStock(player);

  AISetStockArmyScale(player, 0.35);

  KeironGeneralBuild(player, c_ldPhaseLate);

  AILDStockWorkers( player, 26, c_KU_Converter);

  if (buildType == e_buildType_Core) {
      if (KeironMacroExpand(player)) { return; }
      AISetStock( player, 4, c_KB_Edifice );
      AISetStock( player, 2, c_KB_Sanctum );
      AISetStock( player, 2, c_KB_Foundry );
      AISetStock( player, 2, c_KB_Atrium );
      AISetStock( player, 2, c_KB_Conduit );
      AISetStock( player, 2, c_KB_Outlet );
      AISetStock( player, 2, c_KB_Empyrean );
  }
  else if (buildType == e_buildType_HighTech) {
      if (KeironMacroExpand(player)) { return; }
      AISetStock( player, 4, c_KB_Edifice );
      AISetStock( player, 2, c_KB_Sanctum );
      AISetStock( player, 2, c_KB_Foundry );
      AISetStock( player, 2, c_KB_Atrium );
      AISetStock( player, 2, c_KB_Pantheon );
      AISetStock( player, 2, c_KB_Conduit );
      AISetStock( player, 2, c_KB_Outlet );
      AISetStock( player, 2, c_KB_Empyrean );
  }
  else if (buildType == e_buildType_Special) {
      if (KeironMacroExpand(player)) { return; }
      AISetStock( player, 4, c_KB_Edifice );
      AISetStock( player, 3, c_KB_Elysium );
      AISetStock( player, 2, c_KB_Sanctum );
      AISetStock( player, 2, c_KB_Foundry );
      AISetStock( player, 2, c_KB_Atrium );
      AISetStock( player, 2, c_KB_Conduit );
      AISetStock( player, 2, c_KB_Outlet );
      AISetStock( player, 2, c_KB_Empyrean );
  }
  else if (buildType == e_buildType_Mixed) {
      if (KeironMacroExpand(player)) { return; }
      AISetStock( player, 4, c_KB_Edifice );
      AISetStock( player, 2, c_KB_Sanctum );
      AISetStock( player, 2, c_KB_Foundry );
      AISetStock( player, 2, c_KB_Atrium );
      AISetStock( player, 2, c_KB_Conduit );
      AISetStock( player, 2, c_KB_Outlet );
      AISetStock( player, 2, c_KB_Empyrean );
  }
  else if (buildType == e_buildType_Air) {
      if (KeironMacroExpand(player)) { return; }
      AISetStock( player, 4, c_KB_Edifice );
      AISetStock( player, 2, c_KB_Sanctum );
      AISetStock( player, 3, c_KB_Conduit );
      AISetStock( player, 3, c_KB_Outlet );
      AISetStock( player, 3, c_KB_Empyrean );
      AISetStock( player, 2, c_KB_Zenith );
  }

  AISetStock( player, 2, c_KU_Paradox );
  AISetStock( player, 1, c_KB_CitadelCharged );

  AISetStockArmyScale(player, 0.70);

  AISetStock( player, 2, c_KU_Aperture );
  AISetStock( player, 3, c_KU_Paradox );
  AISetStock( player, 2, c_KB_Stratus );

  AISetStockArmyScale(player, 1.00);

  AILDStockWorkers( player, 60, c_KU_Converter);

  if (lateLoop <= 0) { // First Late Loop
      KeironUpgradesMdhd(player, c_ldPhaseLate);
      KeironTechUp(player, c_ldPhaseLate);
  } else { // Remaining Loops
      KeironUpgradesMdhd(player, c_ldPhaseFinal);
      KeironTechUp(player, c_ldPhaseFinal);
  }

  AIEnableStock(player);

  AILDGeneralSharedLogic(player);

  nextState = AITestTimeout(player, timeOut, e_mainState_Late, e_mainSubState_Init);
  if (nextState) {
      lateLoop += 1;
      AISetUserInt(player, c_ldNumLateLoops, lateLoop);
  }
}

//--------------------------------------------------------------------------------------------------
//  KeironOpenMdhd
//--------------------------------------------------------------------------------------------------
void KeironOpenMdhd (int player) {
  int mainSubState = AIState(player, e_mainSubState);

  if (mainSubState != e_mainSubState_Build) {
      KeironOpenInitMdhd(player);
      mainSubState = AIState(player, e_mainSubState);
  }

  if (mainSubState == e_mainSubState_Build) { KeironOpenBuildMdhd(player); }
  else { ErrorMeleeScript(player, "Invalid Open MainSubState KeironMdhd"); }
}

//--------------------------------------------------------------------------------------------------
//  KeironMidMdhd
//--------------------------------------------------------------------------------------------------
void KeironMidMdhd (int player) {
  int mainSubState = AIState(player, e_mainSubState);

  if (mainSubState != e_mainSubState_Build) {
      KeironMidInitMdhd(player);
      mainSubState = AIState(player, e_mainSubState);
  }

  if (mainSubState == e_mainSubState_Build) { KeironMidBuildMdhd(player);  }
  else { ErrorMeleeScript(player, "Invalid Mid MainSubState KeironMdhd"); }
}

//--------------------------------------------------------------------------------------------------
//  KeironLateMdhd
//--------------------------------------------------------------------------------------------------
void KeironLateMdhd (int player) {
  int mainSubState = AIState(player, e_mainSubState);

  if (mainSubState != e_mainSubState_Build) {
      KeironLateInitMdhd(player);
      mainSubState = AIState(player, e_mainSubState);
  }

  if (mainSubState == e_mainSubState_Build) { KeironLateBuildMdhd(player);  }
  else { ErrorMeleeScript(player, "Invalid Late MainSubState KeironMdhd"); }
}

